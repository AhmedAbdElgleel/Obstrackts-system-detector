
Measure_distance_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000346a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000346a  000034fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  00003518  2**0
                  ALLOC
  3 .stab         00002c64  00000000  00000000  00003518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d90  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000081fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b341  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <main>
      8a:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <BUZZER_init>:
/*
 * Description :
 * Function to setup the direction of buzzer as output pin and turn off buzzer initially using gpio.
 */
void BUZZER_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_OFF_BUZZER);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	65 e0       	ldi	r22, 0x05	; 5
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <BUZZER_on>:
/*
 * Description :
 * Function to turn on the buzzer using gpio.
 */
void BUZZER_on(void)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_ON_BUZZER);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	65 e0       	ldi	r22, 0x05	; 5
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <BUZZER_off>:
/*
 * Description :
 * Function to turn off the buzzer using gpio .
 */
void BUZZER_off(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, TURN_OFF_BUZZER);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <BUZZER_toggle>:
/*
 * Description :
 * Function to Toggle the buzzer sound using gpio .
 */
void BUZZER_toggle(void)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
	GPIO_togglePin(BUZZER_PORT_ID, BUZZER_PIN_ID);
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	65 e0       	ldi	r22, 0x05	; 5
     cfc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_togglePin>
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <GPIO_setupPinDirection+0x6>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <GPIO_setupPinDirection+0x8>
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	6a 83       	std	Y+2, r22	; 0x02
     d18:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <GPIO_setupPinDirection+0x1c>
     d20:	d5 c0       	rjmp	.+426    	; 0xecc <GPIO_setupPinDirection+0x1c6>
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	84 30       	cpi	r24, 0x04	; 4
     d26:	08 f0       	brcs	.+2      	; 0xd2a <GPIO_setupPinDirection+0x24>
     d28:	d1 c0       	rjmp	.+418    	; 0xecc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	3d 83       	std	Y+5, r19	; 0x05
     d32:	2c 83       	std	Y+4, r18	; 0x04
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <GPIO_setupPinDirection+0x3a>
     d3e:	43 c0       	rjmp	.+134    	; 0xdc6 <GPIO_setupPinDirection+0xc0>
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	3d 81       	ldd	r19, Y+5	; 0x05
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	2c f4       	brge	.+10     	; 0xd54 <GPIO_setupPinDirection+0x4e>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	71 f0       	breq	.+28     	; 0xd6e <GPIO_setupPinDirection+0x68>
     d52:	bc c0       	rjmp	.+376    	; 0xecc <GPIO_setupPinDirection+0x1c6>
     d54:	2c 81       	ldd	r18, Y+4	; 0x04
     d56:	3d 81       	ldd	r19, Y+5	; 0x05
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <GPIO_setupPinDirection+0x5a>
     d5e:	5f c0       	rjmp	.+190    	; 0xe1e <GPIO_setupPinDirection+0x118>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	91 05       	cpc	r25, r1
     d68:	09 f4       	brne	.+2      	; 0xd6c <GPIO_setupPinDirection+0x66>
     d6a:	85 c0       	rjmp	.+266    	; 0xe76 <GPIO_setupPinDirection+0x170>
     d6c:	af c0       	rjmp	.+350    	; 0xecc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	a1 f4       	brne	.+40     	; 0xd9c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(GPIO_DDRA_REG.Byte,pin_num);
     d74:	aa e3       	ldi	r26, 0x3A	; 58
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e3       	ldi	r30, 0x3A	; 58
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <GPIO_setupPinDirection+0x8c>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <GPIO_setupPinDirection+0x88>
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	98 c0       	rjmp	.+304    	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRA_REG.Byte,pin_num);
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <GPIO_setupPinDirection+0xb4>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <GPIO_setupPinDirection+0xb0>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	83 c0       	rjmp	.+262    	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	a1 f4       	brne	.+40     	; 0xdf4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(GPIO_DDRB_REG.Byte,pin_num);
     dcc:	a7 e3       	ldi	r26, 0x37	; 55
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e7 e3       	ldi	r30, 0x37	; 55
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <GPIO_setupPinDirection+0xe4>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <GPIO_setupPinDirection+0xe0>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	6c c0       	rjmp	.+216    	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRB_REG.Byte,pin_num);
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <GPIO_setupPinDirection+0x10c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <GPIO_setupPinDirection+0x108>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	57 c0       	rjmp	.+174    	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	a1 f4       	brne	.+40     	; 0xe4c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(GPIO_DDRC_REG.Byte,pin_num);
     e24:	a4 e3       	ldi	r26, 0x34	; 52
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e4 e3       	ldi	r30, 0x34	; 52
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <GPIO_setupPinDirection+0x13c>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <GPIO_setupPinDirection+0x138>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	40 c0       	rjmp	.+128    	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRC_REG.Byte,pin_num);
     e4c:	a4 e3       	ldi	r26, 0x34	; 52
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e4 e3       	ldi	r30, 0x34	; 52
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <GPIO_setupPinDirection+0x164>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <GPIO_setupPinDirection+0x160>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	2b c0       	rjmp	.+86     	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(GPIO_DDRD_REG.Byte,pin_num);
     e7c:	a1 e3       	ldi	r26, 0x31	; 49
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e1 e3       	ldi	r30, 0x31	; 49
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_setupPinDirection+0x194>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_setupPinDirection+0x190>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRD_REG.Byte,pin_num);
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_setupPinDirection+0x1bc>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_setupPinDirection+0x1b8>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <GPIO_writePin+0x6>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <GPIO_writePin+0x8>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
     eee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <GPIO_writePin+0x1c>
     ef6:	d5 c0       	rjmp	.+426    	; 0x10a2 <GPIO_writePin+0x1c6>
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	08 f0       	brcs	.+2      	; 0xf00 <GPIO_writePin+0x24>
     efe:	d1 c0       	rjmp	.+418    	; 0x10a2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <GPIO_writePin+0x3a>
     f14:	43 c0       	rjmp	.+134    	; 0xf9c <GPIO_writePin+0xc0>
     f16:	2c 81       	ldd	r18, Y+4	; 0x04
     f18:	3d 81       	ldd	r19, Y+5	; 0x05
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <GPIO_writePin+0x4e>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	71 f0       	breq	.+28     	; 0xf44 <GPIO_writePin+0x68>
     f28:	bc c0       	rjmp	.+376    	; 0x10a2 <GPIO_writePin+0x1c6>
     f2a:	2c 81       	ldd	r18, Y+4	; 0x04
     f2c:	3d 81       	ldd	r19, Y+5	; 0x05
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <GPIO_writePin+0x5a>
     f34:	5f c0       	rjmp	.+190    	; 0xff4 <GPIO_writePin+0x118>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <GPIO_writePin+0x66>
     f40:	85 c0       	rjmp	.+266    	; 0x104c <GPIO_writePin+0x170>
     f42:	af c0       	rjmp	.+350    	; 0x10a2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	a1 f4       	brne	.+40     	; 0xf72 <GPIO_writePin+0x96>
			{
				SET_BIT(GPIO_PORTA_REG.Byte,pin_num);
     f4a:	ab e3       	ldi	r26, 0x3B	; 59
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb e3       	ldi	r30, 0x3B	; 59
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <GPIO_writePin+0x8c>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <GPIO_writePin+0x88>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	98 c0       	rjmp	.+304    	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTA_REG.Byte,pin_num);
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_writePin+0xb4>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_writePin+0xb0>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	83 c0       	rjmp	.+262    	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <GPIO_writePin+0xee>
			{
				SET_BIT(GPIO_PORTB_REG.Byte,pin_num);
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_writePin+0xe4>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_writePin+0xe0>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	6c c0       	rjmp	.+216    	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTB_REG.Byte,pin_num);
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <GPIO_writePin+0x10c>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <GPIO_writePin+0x108>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	57 c0       	rjmp	.+174    	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	a1 f4       	brne	.+40     	; 0x1022 <GPIO_writePin+0x146>
			{
				SET_BIT(GPIO_PORTC_REG.Byte,pin_num);
     ffa:	a5 e3       	ldi	r26, 0x35	; 53
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e3       	ldi	r30, 0x35	; 53
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_writePin+0x13c>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_writePin+0x138>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTC_REG.Byte,pin_num);
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_writePin+0x164>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_writePin+0x160>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	a1 f4       	brne	.+40     	; 0x107a <GPIO_writePin+0x19e>
			{
				SET_BIT(GPIO_PORTD_REG.Byte,pin_num);
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_writePin+0x194>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_writePin+0x190>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTD_REG.Byte,pin_num);
    107a:	a2 e3       	ldi	r26, 0x32	; 50
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <GPIO_writePin+0x1bc>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <GPIO_writePin+0x1b8>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_readPin+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <GPIO_readPin+0x8>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10c4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <GPIO_readPin+0x1c>
    10cc:	84 c0       	rjmp	.+264    	; 0x11d6 <GPIO_readPin+0x124>
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <GPIO_readPin+0x24>
    10d4:	80 c0       	rjmp	.+256    	; 0x11d6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	4c 81       	ldd	r20, Y+4	; 0x04
    10e2:	5d 81       	ldd	r21, Y+5	; 0x05
    10e4:	41 30       	cpi	r20, 0x01	; 1
    10e6:	51 05       	cpc	r21, r1
    10e8:	79 f1       	breq	.+94     	; 0x1148 <GPIO_readPin+0x96>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	91 05       	cpc	r25, r1
    10f2:	34 f4       	brge	.+12     	; 0x1100 <GPIO_readPin+0x4e>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	69 f0       	breq	.+26     	; 0x1118 <GPIO_readPin+0x66>
    10fe:	6b c0       	rjmp	.+214    	; 0x11d6 <GPIO_readPin+0x124>
    1100:	4c 81       	ldd	r20, Y+4	; 0x04
    1102:	5d 81       	ldd	r21, Y+5	; 0x05
    1104:	42 30       	cpi	r20, 0x02	; 2
    1106:	51 05       	cpc	r21, r1
    1108:	b9 f1       	breq	.+110    	; 0x1178 <GPIO_readPin+0xc6>
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <GPIO_readPin+0x64>
    1114:	49 c0       	rjmp	.+146    	; 0x11a8 <GPIO_readPin+0xf6>
    1116:	5f c0       	rjmp	.+190    	; 0x11d6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(GPIO_PINA_REG.Byte,pin_num))
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_readPin+0x7e>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_readPin+0x7a>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	88 23       	and	r24, r24
    113c:	19 f0       	breq	.+6      	; 0x1144 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	49 c0       	rjmp	.+146    	; 0x11d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	47 c0       	rjmp	.+142    	; 0x11d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(GPIO_PINB_REG.Byte,pin_num))
    1148:	e6 e3       	ldi	r30, 0x36	; 54
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_readPin+0xae>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_readPin+0xaa>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	88 23       	and	r24, r24
    116c:	19 f0       	breq	.+6      	; 0x1174 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	31 c0       	rjmp	.+98     	; 0x11d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	2f c0       	rjmp	.+94     	; 0x11d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(GPIO_PINC_REG.Byte,pin_num))
    1178:	e3 e3       	ldi	r30, 0x33	; 51
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_readPin+0xde>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_readPin+0xda>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	88 23       	and	r24, r24
    119c:	19 f0       	breq	.+6      	; 0x11a4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	19 c0       	rjmp	.+50     	; 0x11d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(GPIO_PIND_REG.Byte,pin_num))
    11a8:	e0 e3       	ldi	r30, 0x30	; 48
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_readPin+0x10e>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_readPin+0x10a>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	90 70       	andi	r25, 0x00	; 0
    11ca:	88 23       	and	r24, r24
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11d4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GPIO_togglePin>:

void GPIO_togglePin(uint8 port_num, uint8 pin_num)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_togglePin+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_togglePin+0x8>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <GPIO_togglePin+0x18>
    11fe:	72 c0       	rjmp	.+228    	; 0x12e4 <GPIO_togglePin+0xfc>
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	08 f0       	brcs	.+2      	; 0x1208 <GPIO_togglePin+0x20>
    1206:	6e c0       	rjmp	.+220    	; 0x12e4 <GPIO_togglePin+0xfc>
		/* Do Nothing */
	}
	else
	{
		/* toggle the pin value as required */
		switch(port_num)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	49 f1       	breq	.+82     	; 0x126e <GPIO_togglePin+0x86>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <GPIO_togglePin+0x48>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	61 f0       	breq	.+24     	; 0x1246 <GPIO_togglePin+0x5e>
    122e:	5a c0       	rjmp	.+180    	; 0x12e4 <GPIO_togglePin+0xfc>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	71 f1       	breq	.+92     	; 0x1296 <GPIO_togglePin+0xae>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	e9 f1       	breq	.+122    	; 0x12be <GPIO_togglePin+0xd6>
    1244:	4f c0       	rjmp	.+158    	; 0x12e4 <GPIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_togglePin+0x7c>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_togglePin+0x78>
    1268:	84 27       	eor	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	3b c0       	rjmp	.+118    	; 0x12e4 <GPIO_togglePin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(GPIO_PORTB_REG.Byte,pin_num);
    126e:	a8 e3       	ldi	r26, 0x38	; 56
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e3       	ldi	r30, 0x38	; 56
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_togglePin+0xa4>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_togglePin+0xa0>
    1290:	84 27       	eor	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	27 c0       	rjmp	.+78     	; 0x12e4 <GPIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(GPIO_PORTC_REG.Byte,pin_num);
    1296:	a5 e3       	ldi	r26, 0x35	; 53
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_togglePin+0xcc>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_togglePin+0xc8>
    12b8:	84 27       	eor	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <GPIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(GPIO_PORTD_REG.Byte,pin_num);
    12be:	a2 e3       	ldi	r26, 0x32	; 50
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e2 e3       	ldi	r30, 0x32	; 50
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_togglePin+0xf4>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_togglePin+0xf0>
    12e0:	84 27       	eor	r24, r20
    12e2:	8c 93       	st	X, r24
			break;
		}
	}
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_setupPortDirection+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_setupPortDirection+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	90 f5       	brcc	.+100    	; 0x136c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3c 83       	std	Y+4, r19	; 0x04
    1310:	2b 83       	std	Y+3, r18	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	d1 f0       	breq	.+52     	; 0x1350 <GPIO_setupPortDirection+0x5e>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	2c f4       	brge	.+10     	; 0x1330 <GPIO_setupPortDirection+0x3e>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	61 f0       	breq	.+24     	; 0x1346 <GPIO_setupPortDirection+0x54>
    132e:	1e c0       	rjmp	.+60     	; 0x136c <GPIO_setupPortDirection+0x7a>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <GPIO_setupPortDirection+0x68>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	81 f0       	breq	.+32     	; 0x1364 <GPIO_setupPortDirection+0x72>
    1344:	13 c0       	rjmp	.+38     	; 0x136c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			GPIO_DDRA_REG.Byte=direction;
    1346:	ea e3       	ldi	r30, 0x3A	; 58
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	0e c0       	rjmp	.+28     	; 0x136c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			GPIO_DDRB_REG.Byte=direction;
    1350:	e7 e3       	ldi	r30, 0x37	; 55
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
    1358:	09 c0       	rjmp	.+18     	; 0x136c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			GPIO_DDRC_REG.Byte=direction;
    135a:	e4 e3       	ldi	r30, 0x34	; 52
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	04 c0       	rjmp	.+8      	; 0x136c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			GPIO_DDRD_REG.Byte=direction;
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
			break;
		}
	}
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <GPIO_writePort+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_writePort+0x8>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	90 f5       	brcc	.+100    	; 0x13f4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3c 83       	std	Y+4, r19	; 0x04
    1398:	2b 83       	std	Y+3, r18	; 0x03
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <GPIO_writePort+0x5e>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <GPIO_writePort+0x3e>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	61 f0       	breq	.+24     	; 0x13ce <GPIO_writePort+0x54>
    13b6:	1e c0       	rjmp	.+60     	; 0x13f4 <GPIO_writePort+0x7a>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	81 f0       	breq	.+32     	; 0x13e2 <GPIO_writePort+0x68>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	81 f0       	breq	.+32     	; 0x13ec <GPIO_writePort+0x72>
    13cc:	13 c0       	rjmp	.+38     	; 0x13f4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			GPIO_PORTA_REG.Byte = value;
    13ce:	eb e3       	ldi	r30, 0x3B	; 59
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	0e c0       	rjmp	.+28     	; 0x13f4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			GPIO_PORTB_REG.Byte = value;
    13d8:	e8 e3       	ldi	r30, 0x38	; 56
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			GPIO_PORTC_REG.Byte = value;
    13e2:	e5 e3       	ldi	r30, 0x35	; 53
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			GPIO_PORTD_REG.Byte = value;
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_readPort+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_readPort+0x8>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1410:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	84 30       	cpi	r24, 0x04	; 4
    1416:	90 f5       	brcc	.+100    	; 0x147c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3c 83       	std	Y+4, r19	; 0x04
    1420:	2b 83       	std	Y+3, r18	; 0x03
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	d1 f0       	breq	.+52     	; 0x1460 <GPIO_readPort+0x5e>
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	2c f4       	brge	.+10     	; 0x1440 <GPIO_readPort+0x3e>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 f0       	breq	.+24     	; 0x1456 <GPIO_readPort+0x54>
    143e:	1e c0       	rjmp	.+60     	; 0x147c <GPIO_readPort+0x7a>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <GPIO_readPort+0x68>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	81 f0       	breq	.+32     	; 0x1474 <GPIO_readPort+0x72>
    1454:	13 c0       	rjmp	.+38     	; 0x147c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = GPIO_PINA_REG.Byte;
    1456:	e9 e3       	ldi	r30, 0x39	; 57
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	0e c0       	rjmp	.+28     	; 0x147c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = GPIO_PINB_REG.Byte;
    1460:	e6 e3       	ldi	r30, 0x36	; 54
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	09 c0       	rjmp	.+18     	; 0x147c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = GPIO_PINC_REG.Byte;
    146a:	e3 e3       	ldi	r30, 0x33	; 51
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	04 c0       	rjmp	.+8      	; 0x147c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = GPIO_PIND_REG.Byte;
    1474:	e0 e3       	ldi	r30, 0x30	; 48
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14b6:	80 91 7a 00 	lds	r24, 0x007A
    14ba:	90 91 7b 00 	lds	r25, 0x007B
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	29 f0       	breq	.+10     	; 0x14cc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14c2:	e0 91 7a 00 	lds	r30, 0x007A
    14c6:	f0 91 7b 00 	lds	r31, 0x007B
    14ca:	09 95       	icall
	}
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <ICU_init+0x6>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT);
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	66 e0       	ldi	r22, 0x06	; 6
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>

	/* Timer1 always operates in Normal Mode */
	TIMER1_TCCR1A_REG.Byte=0;
    150a:	ef e4       	ldi	r30, 0x4F	; 79
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
	TIMER1_TCCR1A_REG.Bits.FOC1A_Bit=1;
    1510:	ef e4       	ldi	r30, 0x4F	; 79
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	80 83       	st	Z, r24
	TIMER1_TCCR1A_REG.Bits.FOC1B_Bit=1;
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 60       	ori	r24, 0x08	; 8
    1522:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte & 0XF8)|(Config_Ptr->clock);
    1524:	ae e4       	ldi	r26, 0x4E	; 78
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	ee e4       	ldi	r30, 0x4E	; 78
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	98 2f       	mov	r25, r24
    1530:	98 7f       	andi	r25, 0xF8	; 248
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 81       	ld	r24, Z
    1538:	89 2b       	or	r24, r25
    153a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte& 0xBF)|((Config_Ptr->edge)<<6);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	2f 7b       	andi	r18, 0xBF	; 191
    154a:	e9 81       	ldd	r30, Y+1	; 0x01
    154c:	fa 81       	ldd	r31, Y+2	; 0x02
    154e:	81 81       	ldd	r24, Z+1	; 0x01
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	00 24       	eor	r0, r0
    1556:	96 95       	lsr	r25
    1558:	87 95       	ror	r24
    155a:	07 94       	ror	r0
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	07 94       	ror	r0
    1562:	98 2f       	mov	r25, r24
    1564:	80 2d       	mov	r24, r0
    1566:	82 2b       	or	r24, r18
    1568:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TIMER1_TCNT1_REG.TwoBytes=0;
    156a:	ec e4       	ldi	r30, 0x4C	; 76
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	11 82       	std	Z+1, r1	; 0x01
    1570:	10 82       	st	Z, r1
	/* Initial Value for the input capture register */
	TIMER1_ICR1_REG.TwoBytes = 0;
    1572:	e6 e4       	ldi	r30, 0x46	; 70
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	11 82       	std	Z+1, r1	; 0x01
    1578:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMER1_TIMSK_REG.Bits.TICIE1_Bit=1;
    157a:	e9 e5       	ldi	r30, 0x59	; 89
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 62       	ori	r24, 0x20	; 32
    1582:	80 83       	st	Z, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <ICU_setCallBack+0x6>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	90 93 7b 00 	sts	0x007B, r25
    15a4:	80 93 7a 00 	sts	0x007A, r24
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TIMER1_TCCR1B_REG.Byte=(TIMER1_TCCR1B_REG.Byte&0xBF)|(a_edgeType<<6);
    15be:	ae e4       	ldi	r26, 0x4E	; 78
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ee e4       	ldi	r30, 0x4E	; 78
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	28 2f       	mov	r18, r24
    15ca:	2f 7b       	andi	r18, 0xBF	; 191
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	00 24       	eor	r0, r0
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	07 94       	ror	r0
    15da:	96 95       	lsr	r25
    15dc:	87 95       	ror	r24
    15de:	07 94       	ror	r0
    15e0:	98 2f       	mov	r25, r24
    15e2:	80 2d       	mov	r24, r0
    15e4:	82 2b       	or	r24, r18
    15e6:	8c 93       	st	X, r24
}
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_ICR1_REG.TwoBytes;
    15f8:	e6 e4       	ldi	r30, 0x46	; 70
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCNT1_REG.TwoBytes=0;
    160e:	ec e4       	ldi	r30, 0x4C	; 76
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	11 82       	std	Z+1, r1	; 0x01
    1614:	10 82       	st	Z, r1
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TIMER1_TCCR1A_REG.Byte = 0;
    1624:	ef e4       	ldi	r30, 0x4F	; 79
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	10 82       	st	Z, r1
	TIMER1_TCCR1B_REG.Byte = 0;
    162a:	ee e4       	ldi	r30, 0x4E	; 78
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	10 82       	st	Z, r1
	TIMER1_TCNT1_REG.TwoBytes = 0;
    1630:	ec e4       	ldi	r30, 0x4C	; 76
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	11 82       	std	Z+1, r1	; 0x01
    1636:	10 82       	st	Z, r1
	TIMER1_ICR1_REG.TwoBytes = 0;
    1638:	e6 e4       	ldi	r30, 0x46	; 70
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	11 82       	std	Z+1, r1	; 0x01
    163e:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMER1_TIMSK_REG.Bits.TICIE1_Bit=1;
    1640:	e9 e5       	ldi	r30, 0x59	; 89
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 62       	ori	r24, 0x20	; 32
    1648:	80 83       	st	Z, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    164a:	10 92 7b 00 	sts	0x007B, r1
    164e:	10 92 7a 00 	sts	0x007A, r1
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	2e 97       	sbiw	r28, 0x0e	; 14
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 ea       	ldi	r26, 0xA0	; 160
    1686:	b1 e4       	ldi	r27, 0x41	; 65
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	9c 87       	std	Y+12, r25	; 0x0c
    168c:	ad 87       	std	Y+13, r26	; 0x0d
    168e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6b 85       	ldd	r22, Y+11	; 0x0b
    1692:	7c 85       	ldd	r23, Y+12	; 0x0c
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	55 e4       	ldi	r21, 0x45	; 69
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    16aa:	98 87       	std	Y+8, r25	; 0x08
    16ac:	a9 87       	std	Y+9, r26	; 0x09
    16ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_init+0x7a>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_init+0xda>
    1714:	80 e9       	ldi	r24, 0x90	; 144
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_init+0xc8>
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_init+0xbc>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_init+0x104>
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	64 e0       	ldi	r22, 0x04	; 4
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	66 e0       	ldi	r22, 0x06	; 6
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    178c:	83 e3       	ldi	r24, 0x33	; 51
    178e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1792:	82 e3       	ldi	r24, 0x32	; 50
    1794:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1798:	88 e2       	ldi	r24, 0x28	; 40
    179a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    179e:	8c e0       	ldi	r24, 0x0C	; 12
    17a0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
}
    17aa:	2e 96       	adiw	r28, 0x0e	; 14
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	c3 56       	subi	r28, 0x63	; 99
    17ca:	d0 40       	sbci	r29, 0x00	; 0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	fe 01       	movw	r30, r28
    17d8:	ed 59       	subi	r30, 0x9D	; 157
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e1 5a       	subi	r30, 0xA1	; 161
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e8       	ldi	r26, 0x80	; 128
    17f4:	bf e3       	ldi	r27, 0x3F	; 63
    17f6:	80 83       	st	Z, r24
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	8e 01       	movw	r16, r28
    1800:	05 5a       	subi	r16, 0xA5	; 165
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	fe 01       	movw	r30, r28
    1806:	e1 5a       	subi	r30, 0xA1	; 161
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	55 e4       	ldi	r21, 0x45	; 69
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	80 83       	st	Z, r24
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	a2 83       	std	Z+2, r26	; 0x02
    182a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182c:	fe 01       	movw	r30, r28
    182e:	e5 5a       	subi	r30, 0xA5	; 165
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	44 f4       	brge	.+16     	; 0x185a <LCD_sendCommand+0x9e>
		__ticks = 1;
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5a       	subi	r30, 0xA7	; 167
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	64 c0       	rjmp	.+200    	; 0x1922 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    185a:	fe 01       	movw	r30, r28
    185c:	e5 5a       	subi	r30, 0xA5	; 165
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	0c f0       	brlt	.+2      	; 0x187a <LCD_sendCommand+0xbe>
    1878:	43 c0       	rjmp	.+134    	; 0x1900 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187a:	fe 01       	movw	r30, r28
    187c:	e1 5a       	subi	r30, 0xA1	; 161
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8e 01       	movw	r16, r28
    189a:	07 5a       	subi	r16, 0xA7	; 167
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	1f c0       	rjmp	.+62     	; 0x18f0 <LCD_sendCommand+0x134>
    18b2:	fe 01       	movw	r30, r28
    18b4:	e9 5a       	subi	r30, 0xA9	; 169
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 e9       	ldi	r24, 0x90	; 144
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5a       	subi	r30, 0xA9	; 169
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_sendCommand+0x10e>
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5a       	subi	r30, 0xA9	; 169
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	de 01       	movw	r26, r28
    18da:	a7 5a       	subi	r26, 0xA7	; 167
    18dc:	bf 4f       	sbci	r27, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 5a       	subi	r30, 0xA7	; 167
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	9c 93       	st	X, r25
    18ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	fe 01       	movw	r30, r28
    18f2:	e7 5a       	subi	r30, 0xA7	; 167
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	d1 f6       	brne	.-76     	; 0x18b2 <LCD_sendCommand+0xf6>
    18fe:	27 c0       	rjmp	.+78     	; 0x194e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	8e 01       	movw	r16, r28
    1902:	07 5a       	subi	r16, 0xA7	; 167
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e5 5a       	subi	r30, 0xA5	; 165
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	de 01       	movw	r26, r28
    1924:	ab 5a       	subi	r26, 0xAB	; 171
    1926:	bf 4f       	sbci	r27, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	e7 5a       	subi	r30, 0xA7	; 167
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	8d 93       	st	X+, r24
    1934:	9c 93       	st	X, r25
    1936:	fe 01       	movw	r30, r28
    1938:	eb 5a       	subi	r30, 0xAB	; 171
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_sendCommand+0x184>
    1944:	fe 01       	movw	r30, r28
    1946:	eb 5a       	subi	r30, 0xAB	; 171
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1958:	fe 01       	movw	r30, r28
    195a:	ef 5a       	subi	r30, 0xAF	; 175
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a0 e8       	ldi	r26, 0x80	; 128
    1964:	bf e3       	ldi	r27, 0x3F	; 63
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	8e 01       	movw	r16, r28
    1970:	03 5b       	subi	r16, 0xB3	; 179
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	fe 01       	movw	r30, r28
    1976:	ef 5a       	subi	r30, 0xAF	; 175
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	55 e4       	ldi	r21, 0x45	; 69
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	80 83       	st	Z, r24
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	a2 83       	std	Z+2, r26	; 0x02
    199a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    199c:	fe 01       	movw	r30, r28
    199e:	e3 5b       	subi	r30, 0xB3	; 179
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	44 f4       	brge	.+16     	; 0x19ca <LCD_sendCommand+0x20e>
		__ticks = 1;
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 5b       	subi	r30, 0xB5	; 181
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	64 c0       	rjmp	.+200    	; 0x1a92 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    19ca:	fe 01       	movw	r30, r28
    19cc:	e3 5b       	subi	r30, 0xB3	; 179
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <LCD_sendCommand+0x22e>
    19e8:	43 c0       	rjmp	.+134    	; 0x1a70 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	fe 01       	movw	r30, r28
    19ec:	ef 5a       	subi	r30, 0xAF	; 175
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8e 01       	movw	r16, r28
    1a0a:	05 5b       	subi	r16, 0xB5	; 181
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	1f c0       	rjmp	.+62     	; 0x1a60 <LCD_sendCommand+0x2a4>
    1a22:	fe 01       	movw	r30, r28
    1a24:	e7 5b       	subi	r30, 0xB7	; 183
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 e9       	ldi	r24, 0x90	; 144
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	fe 01       	movw	r30, r28
    1a32:	e7 5b       	subi	r30, 0xB7	; 183
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_sendCommand+0x27e>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e7 5b       	subi	r30, 0xB7	; 183
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	de 01       	movw	r26, r28
    1a4a:	a5 5b       	subi	r26, 0xB5	; 181
    1a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e5 5b       	subi	r30, 0xB5	; 181
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	11 96       	adiw	r26, 0x01	; 1
    1a5c:	9c 93       	st	X, r25
    1a5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	fe 01       	movw	r30, r28
    1a62:	e5 5b       	subi	r30, 0xB5	; 181
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	d1 f6       	brne	.-76     	; 0x1a22 <LCD_sendCommand+0x266>
    1a6e:	27 c0       	rjmp	.+78     	; 0x1abe <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	8e 01       	movw	r16, r28
    1a72:	05 5b       	subi	r16, 0xB5	; 181
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	e3 5b       	subi	r30, 0xB3	; 179
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	de 01       	movw	r26, r28
    1a94:	a9 5b       	subi	r26, 0xB9	; 185
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e5 5b       	subi	r30, 0xB5	; 181
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	8d 93       	st	X+, r24
    1aa4:	9c 93       	st	X, r25
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e9 5b       	subi	r30, 0xB9	; 185
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_sendCommand+0x2f4>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e9 5b       	subi	r30, 0xB9	; 185
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ed 59       	subi	r30, 0x9D	; 157
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	80 71       	andi	r24, 0x10	; 16
    1acc:	90 70       	andi	r25, 0x00	; 0
    1ace:	95 95       	asr	r25
    1ad0:	87 95       	ror	r24
    1ad2:	95 95       	asr	r25
    1ad4:	87 95       	ror	r24
    1ad6:	95 95       	asr	r25
    1ad8:	87 95       	ror	r24
    1ada:	95 95       	asr	r25
    1adc:	87 95       	ror	r24
    1ade:	98 2f       	mov	r25, r24
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	63 e0       	ldi	r22, 0x03	; 3
    1ae4:	49 2f       	mov	r20, r25
    1ae6:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1aea:	fe 01       	movw	r30, r28
    1aec:	ed 59       	subi	r30, 0x9D	; 157
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	80 72       	andi	r24, 0x20	; 32
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	95 95       	asr	r25
    1afc:	87 95       	ror	r24
    1afe:	95 95       	asr	r25
    1b00:	87 95       	ror	r24
    1b02:	95 95       	asr	r25
    1b04:	87 95       	ror	r24
    1b06:	95 95       	asr	r25
    1b08:	87 95       	ror	r24
    1b0a:	95 95       	asr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	98 2f       	mov	r25, r24
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	64 e0       	ldi	r22, 0x04	; 4
    1b14:	49 2f       	mov	r20, r25
    1b16:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ed 59       	subi	r30, 0x9D	; 157
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	80 74       	andi	r24, 0x40	; 64
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	08 2e       	mov	r0, r24
    1b2c:	89 2f       	mov	r24, r25
    1b2e:	00 0c       	add	r0, r0
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 0b       	sbc	r25, r25
    1b34:	00 0c       	add	r0, r0
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	65 e0       	ldi	r22, 0x05	; 5
    1b40:	49 2f       	mov	r20, r25
    1b42:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1b46:	fe 01       	movw	r30, r28
    1b48:	ed 59       	subi	r30, 0x9D	; 157
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	98 2f       	mov	r25, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	99 27       	eor	r25, r25
    1b54:	99 1f       	adc	r25, r25
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	66 e0       	ldi	r22, 0x06	; 6
    1b5a:	49 2f       	mov	r20, r25
    1b5c:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1b60:	fe 01       	movw	r30, r28
    1b62:	ed 5b       	subi	r30, 0xBD	; 189
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e8       	ldi	r26, 0x80	; 128
    1b6c:	bf e3       	ldi	r27, 0x3F	; 63
    1b6e:	80 83       	st	Z, r24
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	a2 83       	std	Z+2, r26	; 0x02
    1b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	8e 01       	movw	r16, r28
    1b78:	01 5c       	subi	r16, 0xC1	; 193
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ed 5b       	subi	r30, 0xBD	; 189
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a e7       	ldi	r20, 0x7A	; 122
    1b90:	55 e4       	ldi	r21, 0x45	; 69
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	80 83       	st	Z, r24
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	a2 83       	std	Z+2, r26	; 0x02
    1ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ff 96       	adiw	r30, 0x3f	; 63
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_sendCommand+0x40e>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9e af       	std	Y+62, r25	; 0x3e
    1bc6:	8d af       	std	Y+61, r24	; 0x3d
    1bc8:	46 c0       	rjmp	.+140    	; 0x1c56 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ff 96       	adiw	r30, 0x3f	; 63
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	64 f5       	brge	.+88     	; 0x1c3e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	fe 01       	movw	r30, r28
    1be8:	ed 5b       	subi	r30, 0xBD	; 189
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e af       	std	Y+62, r25	; 0x3e
    1c12:	8d af       	std	Y+61, r24	; 0x3d
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <LCD_sendCommand+0x478>
    1c16:	80 e9       	ldi	r24, 0x90	; 144
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	9c af       	std	Y+60, r25	; 0x3c
    1c1c:	8b af       	std	Y+59, r24	; 0x3b
    1c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_sendCommand+0x466>
    1c26:	9c af       	std	Y+60, r25	; 0x3c
    1c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	9e af       	std	Y+62, r25	; 0x3e
    1c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <LCD_sendCommand+0x45a>
    1c3c:	16 c0       	rjmp	.+44     	; 0x1c6a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	fe 01       	movw	r30, r28
    1c40:	ff 96       	adiw	r30, 0x3f	; 63
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e af       	std	Y+62, r25	; 0x3e
    1c54:	8d af       	std	Y+61, r24	; 0x3d
    1c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c5a:	9a af       	std	Y+58, r25	; 0x3a
    1c5c:	89 af       	std	Y+57, r24	; 0x39
    1c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_sendCommand+0x4a6>
    1c66:	9a af       	std	Y+58, r25	; 0x3a
    1c68:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a0 e8       	ldi	r26, 0x80	; 128
    1c7a:	bf e3       	ldi	r27, 0x3F	; 63
    1c7c:	8d ab       	std	Y+53, r24	; 0x35
    1c7e:	9e ab       	std	Y+54, r25	; 0x36
    1c80:	af ab       	std	Y+55, r26	; 0x37
    1c82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c84:	6d a9       	ldd	r22, Y+53	; 0x35
    1c86:	7e a9       	ldd	r23, Y+54	; 0x36
    1c88:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a e7       	ldi	r20, 0x7A	; 122
    1c92:	55 e4       	ldi	r21, 0x45	; 69
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	89 ab       	std	Y+49, r24	; 0x31
    1c9e:	9a ab       	std	Y+50, r25	; 0x32
    1ca0:	ab ab       	std	Y+51, r26	; 0x33
    1ca2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    1caa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb8:	88 23       	and	r24, r24
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	98 ab       	std	Y+48, r25	; 0x30
    1cc2:	8f a7       	std	Y+47, r24	; 0x2f
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	4c f5       	brge	.+82     	; 0x1d30 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	98 ab       	std	Y+48, r25	; 0x30
    1d04:	8f a7       	std	Y+47, r24	; 0x2f
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <LCD_sendCommand+0x56a>
    1d08:	80 e9       	ldi	r24, 0x90	; 144
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	9e a7       	std	Y+46, r25	; 0x2e
    1d0e:	8d a7       	std	Y+45, r24	; 0x2d
    1d10:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d12:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_sendCommand+0x558>
    1d18:	9e a7       	std	Y+46, r25	; 0x2e
    1d1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	98 ab       	std	Y+48, r25	; 0x30
    1d24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d28:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	69 f7       	brne	.-38     	; 0x1d08 <LCD_sendCommand+0x54c>
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d30:	69 a9       	ldd	r22, Y+49	; 0x31
    1d32:	7a a9       	ldd	r23, Y+50	; 0x32
    1d34:	8b a9       	ldd	r24, Y+51	; 0x33
    1d36:	9c a9       	ldd	r25, Y+52	; 0x34
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	98 ab       	std	Y+48, r25	; 0x30
    1d42:	8f a7       	std	Y+47, r24	; 0x2f
    1d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d46:	98 a9       	ldd	r25, Y+48	; 0x30
    1d48:	9c a7       	std	Y+44, r25	; 0x2c
    1d4a:	8b a7       	std	Y+43, r24	; 0x2b
    1d4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_sendCommand+0x594>
    1d54:	9c a7       	std	Y+44, r25	; 0x2c
    1d56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	8f a3       	std	Y+39, r24	; 0x27
    1d6c:	98 a7       	std	Y+40, r25	; 0x28
    1d6e:	a9 a7       	std	Y+41, r26	; 0x29
    1d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6f a1       	ldd	r22, Y+39	; 0x27
    1d74:	78 a5       	ldd	r23, Y+40	; 0x28
    1d76:	89 a5       	ldd	r24, Y+41	; 0x29
    1d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	55 e4       	ldi	r21, 0x45	; 69
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8b a3       	std	Y+35, r24	; 0x23
    1d8c:	9c a3       	std	Y+36, r25	; 0x24
    1d8e:	ad a3       	std	Y+37, r26	; 0x25
    1d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d92:	6b a1       	ldd	r22, Y+35	; 0x23
    1d94:	7c a1       	ldd	r23, Y+36	; 0x24
    1d96:	8d a1       	ldd	r24, Y+37	; 0x25
    1d98:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	89 a3       	std	Y+33, r24	; 0x21
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dce:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_sendCommand+0x658>
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	98 a3       	std	Y+32, r25	; 0x20
    1dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e00:	98 a1       	ldd	r25, Y+32	; 0x20
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x646>
    1e06:	98 a3       	std	Y+32, r25	; 0x20
    1e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_sendCommand+0x63a>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e20:	7c a1       	ldd	r23, Y+36	; 0x24
    1e22:	8d a1       	ldd	r24, Y+37	; 0x25
    1e24:	9e a1       	ldd	r25, Y+38	; 0x26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_sendCommand+0x682>
    1e42:	9e 8f       	std	Y+30, r25	; 0x1e
    1e44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1e46:	fe 01       	movw	r30, r28
    1e48:	ed 59       	subi	r30, 0x9D	; 157
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 81       	ld	r24, Z
    1e4e:	98 2f       	mov	r25, r24
    1e50:	91 70       	andi	r25, 0x01	; 1
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	63 e0       	ldi	r22, 0x03	; 3
    1e56:	49 2f       	mov	r20, r25
    1e58:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 59       	subi	r30, 0x9D	; 157
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	82 70       	andi	r24, 0x02	; 2
    1e6a:	90 70       	andi	r25, 0x00	; 0
    1e6c:	95 95       	asr	r25
    1e6e:	87 95       	ror	r24
    1e70:	98 2f       	mov	r25, r24
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	64 e0       	ldi	r22, 0x04	; 4
    1e76:	49 2f       	mov	r20, r25
    1e78:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 59       	subi	r30, 0x9D	; 157
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	84 70       	andi	r24, 0x04	; 4
    1e8a:	90 70       	andi	r25, 0x00	; 0
    1e8c:	95 95       	asr	r25
    1e8e:	87 95       	ror	r24
    1e90:	95 95       	asr	r25
    1e92:	87 95       	ror	r24
    1e94:	98 2f       	mov	r25, r24
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	65 e0       	ldi	r22, 0x05	; 5
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 59       	subi	r30, 0x9D	; 157
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	88 70       	andi	r24, 0x08	; 8
    1eae:	90 70       	andi	r25, 0x00	; 0
    1eb0:	95 95       	asr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	95 95       	asr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	66 e0       	ldi	r22, 0x06	; 6
    1ec2:	49 2f       	mov	r20, r25
    1ec4:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e8       	ldi	r26, 0x80	; 128
    1ece:	bf e3       	ldi	r27, 0x3F	; 63
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1edc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ede:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e7       	ldi	r20, 0x7A	; 122
    1ee6:	55 e4       	ldi	r21, 0x45	; 69
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8d 8b       	std	Y+21, r24	; 0x15
    1ef2:	9e 8b       	std	Y+22, r25	; 0x16
    1ef4:	af 8b       	std	Y+23, r26	; 0x17
    1ef6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 8b       	std	Y+20, r25	; 0x14
    1f16:	8b 8b       	std	Y+19, r24	; 0x13
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f20:	98 8d       	ldd	r25, Y+24	; 0x18
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	69 8d       	ldd	r22, Y+25	; 0x19
    1f34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <LCD_sendCommand+0x7be>
    1f5c:	80 e9       	ldi	r24, 0x90	; 144
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	9a 8b       	std	Y+18, r25	; 0x12
    1f62:	89 8b       	std	Y+17, r24	; 0x11
    1f64:	89 89       	ldd	r24, Y+17	; 0x11
    1f66:	9a 89       	ldd	r25, Y+18	; 0x12
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_sendCommand+0x7ac>
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9c 8b       	std	Y+20, r25	; 0x14
    1f78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <LCD_sendCommand+0x7a0>
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	98 8b       	std	Y+16, r25	; 0x10
    1f9e:	8f 87       	std	Y+15, r24	; 0x0f
    1fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa2:	98 89       	ldd	r25, Y+16	; 0x10
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_sendCommand+0x7e8>
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a e7       	ldi	r20, 0x7A	; 122
    1fd4:	55 e4       	ldi	r21, 0x45	; 69
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_sendCommand+0x8ac>
    204a:	80 e9       	ldi	r24, 0x90	; 144
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_sendCommand+0x89a>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_sendCommand+0x88e>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_sendCommand+0x8d6>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    209a:	cd 59       	subi	r28, 0x9D	; 157
    209c:	df 4f       	sbci	r29, 0xFF	; 255
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	08 95       	ret

000020b2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	c3 56       	subi	r28, 0x63	; 99
    20c0:	d0 40       	sbci	r29, 0x00	; 0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	fe 01       	movw	r30, r28
    20ce:	ed 59       	subi	r30, 0x9D	; 157
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    20de:	fe 01       	movw	r30, r28
    20e0:	e1 5a       	subi	r30, 0xA1	; 161
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e8       	ldi	r26, 0x80	; 128
    20ea:	bf e3       	ldi	r27, 0x3F	; 63
    20ec:	80 83       	st	Z, r24
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	a2 83       	std	Z+2, r26	; 0x02
    20f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f4:	8e 01       	movw	r16, r28
    20f6:	05 5a       	subi	r16, 0xA5	; 165
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	e1 5a       	subi	r30, 0xA1	; 161
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	55 e4       	ldi	r21, 0x45	; 69
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	80 83       	st	Z, r24
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	a2 83       	std	Z+2, r26	; 0x02
    2120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2122:	fe 01       	movw	r30, r28
    2124:	e5 5a       	subi	r30, 0xA5	; 165
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	44 f4       	brge	.+16     	; 0x2150 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2140:	fe 01       	movw	r30, r28
    2142:	e7 5a       	subi	r30, 0xA7	; 167
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	64 c0       	rjmp	.+200    	; 0x2218 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2150:	fe 01       	movw	r30, r28
    2152:	e5 5a       	subi	r30, 0xA5	; 165
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	0c f0       	brlt	.+2      	; 0x2170 <LCD_displayCharacter+0xbe>
    216e:	43 c0       	rjmp	.+134    	; 0x21f6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	fe 01       	movw	r30, r28
    2172:	e1 5a       	subi	r30, 0xA1	; 161
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8e 01       	movw	r16, r28
    2190:	07 5a       	subi	r16, 0xA7	; 167
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	f8 01       	movw	r30, r16
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <LCD_displayCharacter+0x134>
    21a8:	fe 01       	movw	r30, r28
    21aa:	e9 5a       	subi	r30, 0xA9	; 169
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 e9       	ldi	r24, 0x90	; 144
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	fe 01       	movw	r30, r28
    21b8:	e9 5a       	subi	r30, 0xA9	; 169
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_displayCharacter+0x10e>
    21c4:	fe 01       	movw	r30, r28
    21c6:	e9 5a       	subi	r30, 0xA9	; 169
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	de 01       	movw	r26, r28
    21d0:	a7 5a       	subi	r26, 0xA7	; 167
    21d2:	bf 4f       	sbci	r27, 0xFF	; 255
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 5a       	subi	r30, 0xA7	; 167
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	11 96       	adiw	r26, 0x01	; 1
    21e2:	9c 93       	st	X, r25
    21e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	fe 01       	movw	r30, r28
    21e8:	e7 5a       	subi	r30, 0xA7	; 167
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	d1 f6       	brne	.-76     	; 0x21a8 <LCD_displayCharacter+0xf6>
    21f4:	27 c0       	rjmp	.+78     	; 0x2244 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	8e 01       	movw	r16, r28
    21f8:	07 5a       	subi	r16, 0xA7	; 167
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	fe 01       	movw	r30, r28
    21fe:	e5 5a       	subi	r30, 0xA5	; 165
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	93 81       	ldd	r25, Z+3	; 0x03
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
    2218:	de 01       	movw	r26, r28
    221a:	ab 5a       	subi	r26, 0xAB	; 171
    221c:	bf 4f       	sbci	r27, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e7 5a       	subi	r30, 0xA7	; 167
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	8d 93       	st	X+, r24
    222a:	9c 93       	st	X, r25
    222c:	fe 01       	movw	r30, r28
    222e:	eb 5a       	subi	r30, 0xAB	; 171
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_displayCharacter+0x184>
    223a:	fe 01       	movw	r30, r28
    223c:	eb 5a       	subi	r30, 0xAB	; 171
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    224e:	fe 01       	movw	r30, r28
    2250:	ef 5a       	subi	r30, 0xAF	; 175
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e8       	ldi	r26, 0x80	; 128
    225a:	bf e3       	ldi	r27, 0x3F	; 63
    225c:	80 83       	st	Z, r24
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	a2 83       	std	Z+2, r26	; 0x02
    2262:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	8e 01       	movw	r16, r28
    2266:	03 5b       	subi	r16, 0xB3	; 179
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	fe 01       	movw	r30, r28
    226c:	ef 5a       	subi	r30, 0xAF	; 175
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a e7       	ldi	r20, 0x7A	; 122
    227e:	55 e4       	ldi	r21, 0x45	; 69
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	80 83       	st	Z, r24
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	a2 83       	std	Z+2, r26	; 0x02
    2290:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2292:	fe 01       	movw	r30, r28
    2294:	e3 5b       	subi	r30, 0xB3	; 179
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	44 f4       	brge	.+16     	; 0x22c0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 5b       	subi	r30, 0xB5	; 181
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	64 c0       	rjmp	.+200    	; 0x2388 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22c0:	fe 01       	movw	r30, r28
    22c2:	e3 5b       	subi	r30, 0xB3	; 179
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	0c f0       	brlt	.+2      	; 0x22e0 <LCD_displayCharacter+0x22e>
    22de:	43 c0       	rjmp	.+134    	; 0x2366 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	fe 01       	movw	r30, r28
    22e2:	ef 5a       	subi	r30, 0xAF	; 175
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8e 01       	movw	r16, r28
    2300:	05 5b       	subi	r16, 0xB5	; 181
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	f8 01       	movw	r30, r16
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
    2316:	1f c0       	rjmp	.+62     	; 0x2356 <LCD_displayCharacter+0x2a4>
    2318:	fe 01       	movw	r30, r28
    231a:	e7 5b       	subi	r30, 0xB7	; 183
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 e9       	ldi	r24, 0x90	; 144
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	80 83       	st	Z, r24
    2326:	fe 01       	movw	r30, r28
    2328:	e7 5b       	subi	r30, 0xB7	; 183
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_displayCharacter+0x27e>
    2334:	fe 01       	movw	r30, r28
    2336:	e7 5b       	subi	r30, 0xB7	; 183
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	de 01       	movw	r26, r28
    2340:	a5 5b       	subi	r26, 0xB5	; 181
    2342:	bf 4f       	sbci	r27, 0xFF	; 255
    2344:	fe 01       	movw	r30, r28
    2346:	e5 5b       	subi	r30, 0xB5	; 181
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	11 96       	adiw	r26, 0x01	; 1
    2352:	9c 93       	st	X, r25
    2354:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	fe 01       	movw	r30, r28
    2358:	e5 5b       	subi	r30, 0xB5	; 181
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	d1 f6       	brne	.-76     	; 0x2318 <LCD_displayCharacter+0x266>
    2364:	27 c0       	rjmp	.+78     	; 0x23b4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	8e 01       	movw	r16, r28
    2368:	05 5b       	subi	r16, 0xB5	; 181
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	fe 01       	movw	r30, r28
    236e:	e3 5b       	subi	r30, 0xB3	; 179
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	60 81       	ld	r22, Z
    2374:	71 81       	ldd	r23, Z+1	; 0x01
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	f8 01       	movw	r30, r16
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	de 01       	movw	r26, r28
    238a:	a9 5b       	subi	r26, 0xB9	; 185
    238c:	bf 4f       	sbci	r27, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e5 5b       	subi	r30, 0xB5	; 181
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	91 81       	ldd	r25, Z+1	; 0x01
    2398:	8d 93       	st	X+, r24
    239a:	9c 93       	st	X, r25
    239c:	fe 01       	movw	r30, r28
    239e:	e9 5b       	subi	r30, 0xB9	; 185
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 81       	ld	r24, Z
    23a4:	91 81       	ldd	r25, Z+1	; 0x01
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_displayCharacter+0x2f4>
    23aa:	fe 01       	movw	r30, r28
    23ac:	e9 5b       	subi	r30, 0xB9	; 185
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 59       	subi	r30, 0x9D	; 157
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	80 71       	andi	r24, 0x10	; 16
    23c2:	90 70       	andi	r25, 0x00	; 0
    23c4:	95 95       	asr	r25
    23c6:	87 95       	ror	r24
    23c8:	95 95       	asr	r25
    23ca:	87 95       	ror	r24
    23cc:	95 95       	asr	r25
    23ce:	87 95       	ror	r24
    23d0:	95 95       	asr	r25
    23d2:	87 95       	ror	r24
    23d4:	98 2f       	mov	r25, r24
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	63 e0       	ldi	r22, 0x03	; 3
    23da:	49 2f       	mov	r20, r25
    23dc:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 59       	subi	r30, 0x9D	; 157
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	80 72       	andi	r24, 0x20	; 32
    23ee:	90 70       	andi	r25, 0x00	; 0
    23f0:	95 95       	asr	r25
    23f2:	87 95       	ror	r24
    23f4:	95 95       	asr	r25
    23f6:	87 95       	ror	r24
    23f8:	95 95       	asr	r25
    23fa:	87 95       	ror	r24
    23fc:	95 95       	asr	r25
    23fe:	87 95       	ror	r24
    2400:	95 95       	asr	r25
    2402:	87 95       	ror	r24
    2404:	98 2f       	mov	r25, r24
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	64 e0       	ldi	r22, 0x04	; 4
    240a:	49 2f       	mov	r20, r25
    240c:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2410:	fe 01       	movw	r30, r28
    2412:	ed 59       	subi	r30, 0x9D	; 157
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	80 74       	andi	r24, 0x40	; 64
    241e:	90 70       	andi	r25, 0x00	; 0
    2420:	08 2e       	mov	r0, r24
    2422:	89 2f       	mov	r24, r25
    2424:	00 0c       	add	r0, r0
    2426:	88 1f       	adc	r24, r24
    2428:	99 0b       	sbc	r25, r25
    242a:	00 0c       	add	r0, r0
    242c:	88 1f       	adc	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	98 2f       	mov	r25, r24
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	49 2f       	mov	r20, r25
    2438:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    243c:	fe 01       	movw	r30, r28
    243e:	ed 59       	subi	r30, 0x9D	; 157
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	98 2f       	mov	r25, r24
    2446:	99 1f       	adc	r25, r25
    2448:	99 27       	eor	r25, r25
    244a:	99 1f       	adc	r25, r25
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	66 e0       	ldi	r22, 0x06	; 6
    2450:	49 2f       	mov	r20, r25
    2452:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2456:	fe 01       	movw	r30, r28
    2458:	ed 5b       	subi	r30, 0xBD	; 189
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a0 e8       	ldi	r26, 0x80	; 128
    2462:	bf e3       	ldi	r27, 0x3F	; 63
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	8e 01       	movw	r16, r28
    246e:	01 5c       	subi	r16, 0xC1	; 193
    2470:	1f 4f       	sbci	r17, 0xFF	; 255
    2472:	fe 01       	movw	r30, r28
    2474:	ed 5b       	subi	r30, 0xBD	; 189
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	55 e4       	ldi	r21, 0x45	; 69
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	f8 01       	movw	r30, r16
    2492:	80 83       	st	Z, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	a2 83       	std	Z+2, r26	; 0x02
    2498:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249a:	fe 01       	movw	r30, r28
    249c:	ff 96       	adiw	r30, 0x3f	; 63
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	2c f4       	brge	.+10     	; 0x24c0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9e af       	std	Y+62, r25	; 0x3e
    24bc:	8d af       	std	Y+61, r24	; 0x3d
    24be:	46 c0       	rjmp	.+140    	; 0x254c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    24c0:	fe 01       	movw	r30, r28
    24c2:	ff 96       	adiw	r30, 0x3f	; 63
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	3f ef       	ldi	r19, 0xFF	; 255
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	57 e4       	ldi	r21, 0x47	; 71
    24d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d8:	18 16       	cp	r1, r24
    24da:	64 f5       	brge	.+88     	; 0x2534 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24dc:	fe 01       	movw	r30, r28
    24de:	ed 5b       	subi	r30, 0xBD	; 189
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e af       	std	Y+62, r25	; 0x3e
    2508:	8d af       	std	Y+61, r24	; 0x3d
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_displayCharacter+0x478>
    250c:	80 e9       	ldi	r24, 0x90	; 144
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	9c af       	std	Y+60, r25	; 0x3c
    2512:	8b af       	std	Y+59, r24	; 0x3b
    2514:	8b ad       	ldd	r24, Y+59	; 0x3b
    2516:	9c ad       	ldd	r25, Y+60	; 0x3c
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x466>
    251c:	9c af       	std	Y+60, r25	; 0x3c
    251e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8d ad       	ldd	r24, Y+61	; 0x3d
    2522:	9e ad       	ldd	r25, Y+62	; 0x3e
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9e af       	std	Y+62, r25	; 0x3e
    2528:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8d ad       	ldd	r24, Y+61	; 0x3d
    252c:	9e ad       	ldd	r25, Y+62	; 0x3e
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_displayCharacter+0x45a>
    2532:	16 c0       	rjmp	.+44     	; 0x2560 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	fe 01       	movw	r30, r28
    2536:	ff 96       	adiw	r30, 0x3f	; 63
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e af       	std	Y+62, r25	; 0x3e
    254a:	8d af       	std	Y+61, r24	; 0x3d
    254c:	8d ad       	ldd	r24, Y+61	; 0x3d
    254e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2550:	9a af       	std	Y+58, r25	; 0x3a
    2552:	89 af       	std	Y+57, r24	; 0x39
    2554:	89 ad       	ldd	r24, Y+57	; 0x39
    2556:	9a ad       	ldd	r25, Y+58	; 0x3a
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_displayCharacter+0x4a6>
    255c:	9a af       	std	Y+58, r25	; 0x3a
    255e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a0 e8       	ldi	r26, 0x80	; 128
    2570:	bf e3       	ldi	r27, 0x3F	; 63
    2572:	8d ab       	std	Y+53, r24	; 0x35
    2574:	9e ab       	std	Y+54, r25	; 0x36
    2576:	af ab       	std	Y+55, r26	; 0x37
    2578:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6d a9       	ldd	r22, Y+53	; 0x35
    257c:	7e a9       	ldd	r23, Y+54	; 0x36
    257e:	8f a9       	ldd	r24, Y+55	; 0x37
    2580:	98 ad       	ldd	r25, Y+56	; 0x38
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a e7       	ldi	r20, 0x7A	; 122
    2588:	55 e4       	ldi	r21, 0x45	; 69
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	89 ab       	std	Y+49, r24	; 0x31
    2594:	9a ab       	std	Y+50, r25	; 0x32
    2596:	ab ab       	std	Y+51, r26	; 0x33
    2598:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    259a:	69 a9       	ldd	r22, Y+49	; 0x31
    259c:	7a a9       	ldd	r23, Y+50	; 0x32
    259e:	8b a9       	ldd	r24, Y+51	; 0x33
    25a0:	9c a9       	ldd	r25, Y+52	; 0x34
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <LCD_displayCharacter+0x50a>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	98 ab       	std	Y+48, r25	; 0x30
    25b8:	8f a7       	std	Y+47, r24	; 0x2f
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	7a a9       	ldd	r23, Y+50	; 0x32
    25c0:	8b a9       	ldd	r24, Y+51	; 0x33
    25c2:	9c a9       	ldd	r25, Y+52	; 0x34
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6d a9       	ldd	r22, Y+53	; 0x35
    25d6:	7e a9       	ldd	r23, Y+54	; 0x36
    25d8:	8f a9       	ldd	r24, Y+55	; 0x37
    25da:	98 ad       	ldd	r25, Y+56	; 0x38
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	98 ab       	std	Y+48, r25	; 0x30
    25fa:	8f a7       	std	Y+47, r24	; 0x2f
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <LCD_displayCharacter+0x56a>
    25fe:	80 e9       	ldi	r24, 0x90	; 144
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	9e a7       	std	Y+46, r25	; 0x2e
    2604:	8d a7       	std	Y+45, r24	; 0x2d
    2606:	8d a5       	ldd	r24, Y+45	; 0x2d
    2608:	9e a5       	ldd	r25, Y+46	; 0x2e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_displayCharacter+0x558>
    260e:	9e a7       	std	Y+46, r25	; 0x2e
    2610:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	8f a5       	ldd	r24, Y+47	; 0x2f
    2614:	98 a9       	ldd	r25, Y+48	; 0x30
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <LCD_displayCharacter+0x54c>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	69 a9       	ldd	r22, Y+49	; 0x31
    2628:	7a a9       	ldd	r23, Y+50	; 0x32
    262a:	8b a9       	ldd	r24, Y+51	; 0x33
    262c:	9c a9       	ldd	r25, Y+52	; 0x34
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	98 ab       	std	Y+48, r25	; 0x30
    2638:	8f a7       	std	Y+47, r24	; 0x2f
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	9c a7       	std	Y+44, r25	; 0x2c
    2640:	8b a7       	std	Y+43, r24	; 0x2b
    2642:	8b a5       	ldd	r24, Y+43	; 0x2b
    2644:	9c a5       	ldd	r25, Y+44	; 0x2c
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_displayCharacter+0x594>
    264a:	9c a7       	std	Y+44, r25	; 0x2c
    264c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a0 e8       	ldi	r26, 0x80	; 128
    265e:	bf e3       	ldi	r27, 0x3F	; 63
    2660:	8f a3       	std	Y+39, r24	; 0x27
    2662:	98 a7       	std	Y+40, r25	; 0x28
    2664:	a9 a7       	std	Y+41, r26	; 0x29
    2666:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6f a1       	ldd	r22, Y+39	; 0x27
    266a:	78 a5       	ldd	r23, Y+40	; 0x28
    266c:	89 a5       	ldd	r24, Y+41	; 0x29
    266e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a e7       	ldi	r20, 0x7A	; 122
    2676:	55 e4       	ldi	r21, 0x45	; 69
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8b a3       	std	Y+35, r24	; 0x23
    2682:	9c a3       	std	Y+36, r25	; 0x24
    2684:	ad a3       	std	Y+37, r26	; 0x25
    2686:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2688:	6b a1       	ldd	r22, Y+35	; 0x23
    268a:	7c a1       	ldd	r23, Y+36	; 0x24
    268c:	8d a1       	ldd	r24, Y+37	; 0x25
    268e:	9e a1       	ldd	r25, Y+38	; 0x26
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9a a3       	std	Y+34, r25	; 0x22
    26a6:	89 a3       	std	Y+33, r24	; 0x21
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    26aa:	6b a1       	ldd	r22, Y+35	; 0x23
    26ac:	7c a1       	ldd	r23, Y+36	; 0x24
    26ae:	8d a1       	ldd	r24, Y+37	; 0x25
    26b0:	9e a1       	ldd	r25, Y+38	; 0x26
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9a a3       	std	Y+34, r25	; 0x22
    26e8:	89 a3       	std	Y+33, r24	; 0x21
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <LCD_displayCharacter+0x658>
    26ec:	80 e9       	ldi	r24, 0x90	; 144
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	98 a3       	std	Y+32, r25	; 0x20
    26f2:	8f 8f       	std	Y+31, r24	; 0x1f
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	ldd	r25, Y+32	; 0x20
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <LCD_displayCharacter+0x646>
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	89 a1       	ldd	r24, Y+33	; 0x21
    2702:	9a a1       	ldd	r25, Y+34	; 0x22
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <LCD_displayCharacter+0x63a>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9a a3       	std	Y+34, r25	; 0x22
    2726:	89 a3       	std	Y+33, r24	; 0x21
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	9e 8f       	std	Y+30, r25	; 0x1e
    272e:	8d 8f       	std	Y+29, r24	; 0x1d
    2730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_displayCharacter+0x682>
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    273c:	fe 01       	movw	r30, r28
    273e:	ed 59       	subi	r30, 0x9D	; 157
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	98 2f       	mov	r25, r24
    2746:	91 70       	andi	r25, 0x01	; 1
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	63 e0       	ldi	r22, 0x03	; 3
    274c:	49 2f       	mov	r20, r25
    274e:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2752:	fe 01       	movw	r30, r28
    2754:	ed 59       	subi	r30, 0x9D	; 157
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	82 70       	andi	r24, 0x02	; 2
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	98 2f       	mov	r25, r24
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	64 e0       	ldi	r22, 0x04	; 4
    276c:	49 2f       	mov	r20, r25
    276e:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2772:	fe 01       	movw	r30, r28
    2774:	ed 59       	subi	r30, 0x9D	; 157
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	84 70       	andi	r24, 0x04	; 4
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	95 95       	asr	r25
    2784:	87 95       	ror	r24
    2786:	95 95       	asr	r25
    2788:	87 95       	ror	r24
    278a:	98 2f       	mov	r25, r24
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2796:	fe 01       	movw	r30, r28
    2798:	ed 59       	subi	r30, 0x9D	; 157
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	88 70       	andi	r24, 0x08	; 8
    27a4:	90 70       	andi	r25, 0x00	; 0
    27a6:	95 95       	asr	r25
    27a8:	87 95       	ror	r24
    27aa:	95 95       	asr	r25
    27ac:	87 95       	ror	r24
    27ae:	95 95       	asr	r25
    27b0:	87 95       	ror	r24
    27b2:	98 2f       	mov	r25, r24
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	66 e0       	ldi	r22, 0x06	; 6
    27b8:	49 2f       	mov	r20, r25
    27ba:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e8       	ldi	r26, 0x80	; 128
    27c4:	bf e3       	ldi	r27, 0x3F	; 63
    27c6:	89 8f       	std	Y+25, r24	; 0x19
    27c8:	9a 8f       	std	Y+26, r25	; 0x1a
    27ca:	ab 8f       	std	Y+27, r26	; 0x1b
    27cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	69 8d       	ldd	r22, Y+25	; 0x19
    27d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a e7       	ldi	r20, 0x7A	; 122
    27dc:	55 e4       	ldi	r21, 0x45	; 69
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8d 8b       	std	Y+21, r24	; 0x15
    27e8:	9e 8b       	std	Y+22, r25	; 0x16
    27ea:	af 8b       	std	Y+23, r26	; 0x17
    27ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ee:	6d 89       	ldd	r22, Y+21	; 0x15
    27f0:	7e 89       	ldd	r23, Y+22	; 0x16
    27f2:	8f 89       	ldd	r24, Y+23	; 0x17
    27f4:	98 8d       	ldd	r25, Y+24	; 0x18
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	2c f4       	brge	.+10     	; 0x2810 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
    280e:	3f c0       	rjmp	.+126    	; 0x288e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	4c f5       	brge	.+82     	; 0x287a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	69 8d       	ldd	r22, Y+25	; 0x19
    282a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <LCD_displayCharacter+0x7be>
    2852:	80 e9       	ldi	r24, 0x90	; 144
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	9a 8b       	std	Y+18, r25	; 0x12
    2858:	89 8b       	std	Y+17, r24	; 0x11
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	9a 89       	ldd	r25, Y+18	; 0x12
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_displayCharacter+0x7ac>
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	8b 89       	ldd	r24, Y+19	; 0x13
    2868:	9c 89       	ldd	r25, Y+20	; 0x14
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9c 8b       	std	Y+20, r25	; 0x14
    286e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2870:	8b 89       	ldd	r24, Y+19	; 0x13
    2872:	9c 89       	ldd	r25, Y+20	; 0x14
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	69 f7       	brne	.-38     	; 0x2852 <LCD_displayCharacter+0x7a0>
    2878:	14 c0       	rjmp	.+40     	; 0x28a2 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9c 8b       	std	Y+20, r25	; 0x14
    288c:	8b 8b       	std	Y+19, r24	; 0x13
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	98 8b       	std	Y+16, r25	; 0x10
    2894:	8f 87       	std	Y+15, r24	; 0x0f
    2896:	8f 85       	ldd	r24, Y+15	; 0x0f
    2898:	98 89       	ldd	r25, Y+16	; 0x10
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_displayCharacter+0x7e8>
    289e:	98 8b       	std	Y+16, r25	; 0x10
    28a0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	8b 87       	std	Y+11, r24	; 0x0b
    28b6:	9c 87       	std	Y+12, r25	; 0x0c
    28b8:	ad 87       	std	Y+13, r26	; 0x0d
    28ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a e7       	ldi	r20, 0x7A	; 122
    28ca:	55 e4       	ldi	r21, 0x45	; 69
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	8f 83       	std	Y+7, r24	; 0x07
    28d6:	98 87       	std	Y+8, r25	; 0x08
    28d8:	a9 87       	std	Y+9, r26	; 0x09
    28da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28dc:	6f 81       	ldd	r22, Y+7	; 0x07
    28de:	78 85       	ldd	r23, Y+8	; 0x08
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_displayCharacter+0x84c>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	6b 85       	ldd	r22, Y+11	; 0x0b
    2918:	7c 85       	ldd	r23, Y+12	; 0x0c
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_displayCharacter+0x8ac>
    2940:	80 e9       	ldi	r24, 0x90	; 144
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	9c 83       	std	Y+4, r25	; 0x04
    2946:	8b 83       	std	Y+3, r24	; 0x03
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_displayCharacter+0x89a>
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9e 83       	std	Y+6, r25	; 0x06
    295c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_displayCharacter+0x88e>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	6f 81       	ldd	r22, Y+7	; 0x07
    296a:	78 85       	ldd	r23, Y+8	; 0x08
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_displayCharacter+0x8d6>
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2990:	cd 59       	subi	r28, 0x9D	; 157
    2992:	df 4f       	sbci	r29, 0xFF	; 255
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	08 95       	ret

000029a8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <LCD_displayString+0x6>
    29ae:	0f 92       	push	r0
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	80 81       	ld	r24, Z
    29ce:	0e 94 59 10 	call	0x20b2	; 0x20b2 <LCD_displayCharacter>
		i++;
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	9b 81       	ldd	r25, Y+3	; 0x03
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	80 81       	ld	r24, Z
    29ea:	88 23       	and	r24, r24
    29ec:	39 f7       	brne	.-50     	; 0x29bc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <LCD_moveCursor+0x6>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <LCD_moveCursor+0x8>
    2a02:	0f 92       	push	r0
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	8a 83       	std	Y+2, r24	; 0x02
    2a0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	3d 83       	std	Y+5, r19	; 0x05
    2a14:	2c 83       	std	Y+4, r18	; 0x04
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	c1 f0       	breq	.+48     	; 0x2a50 <LCD_moveCursor+0x56>
    2a20:	2c 81       	ldd	r18, Y+4	; 0x04
    2a22:	3d 81       	ldd	r19, Y+5	; 0x05
    2a24:	22 30       	cpi	r18, 0x02	; 2
    2a26:	31 05       	cpc	r19, r1
    2a28:	2c f4       	brge	.+10     	; 0x2a34 <LCD_moveCursor+0x3a>
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	61 f0       	breq	.+24     	; 0x2a4a <LCD_moveCursor+0x50>
    2a32:	19 c0       	rjmp	.+50     	; 0x2a66 <LCD_moveCursor+0x6c>
    2a34:	2c 81       	ldd	r18, Y+4	; 0x04
    2a36:	3d 81       	ldd	r19, Y+5	; 0x05
    2a38:	22 30       	cpi	r18, 0x02	; 2
    2a3a:	31 05       	cpc	r19, r1
    2a3c:	69 f0       	breq	.+26     	; 0x2a58 <LCD_moveCursor+0x5e>
    2a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a40:	9d 81       	ldd	r25, Y+5	; 0x05
    2a42:	83 30       	cpi	r24, 0x03	; 3
    2a44:	91 05       	cpc	r25, r1
    2a46:	61 f0       	breq	.+24     	; 0x2a60 <LCD_moveCursor+0x66>
    2a48:	0e c0       	rjmp	.+28     	; 0x2a66 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	0b c0       	rjmp	.+22     	; 0x2a66 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	80 5c       	subi	r24, 0xC0	; 192
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	07 c0       	rjmp	.+14     	; 0x2a66 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	80 5f       	subi	r24, 0xF0	; 240
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	03 c0       	rjmp	.+6      	; 0x2a66 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	80 5b       	subi	r24, 0xB0	; 176
    2a64:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <LCD_displayStringRowColumn+0x6>
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <LCD_displayStringRowColumn+0x8>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	6a 83       	std	Y+2, r22	; 0x02
    2a8e:	5c 83       	std	Y+4, r21	; 0x04
    2a90:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	6a 81       	ldd	r22, Y+2	; 0x02
    2a96:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <LCD_displayString>
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint16 data)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	62 97       	sbiw	r28, 0x12	; 18
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ac8:	89 89       	ldd	r24, Y+17	; 0x11
    2aca:	9a 89       	ldd	r25, Y+18	; 0x12
    2acc:	9e 01       	movw	r18, r28
    2ace:	2f 5f       	subi	r18, 0xFF	; 255
    2ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad2:	b9 01       	movw	r22, r18
    2ad4:	4a e0       	ldi	r20, 0x0A	; 10
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	0e 94 ac 19 	call	0x3358	; 0x3358 <itoa>
   LCD_displayString(buff); /* Display the string */
    2adc:	ce 01       	movw	r24, r28
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <LCD_displayString>
}
    2ae4:	62 96       	adiw	r28, 0x12	; 18
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <LCD_longToString>:
 * Description :
 * Display the required decimal value on the screen from range  -2147483648 .. +2147483647
 * so use this function is the number is bigger than +32767 or smaller than -32768
 */
void LCD_longToString(sint32 data)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	64 97       	sbiw	r28, 0x14	; 20
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	69 8b       	std	Y+17, r22	; 0x11
    2b0c:	7a 8b       	std	Y+18, r23	; 0x12
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   ltoa(data,buff,10); /* Use ltoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b12:	89 89       	ldd	r24, Y+17	; 0x11
    2b14:	9a 89       	ldd	r25, Y+18	; 0x12
    2b16:	ab 89       	ldd	r26, Y+19	; 0x13
    2b18:	bc 89       	ldd	r27, Y+20	; 0x14
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	9e 01       	movw	r18, r28
    2b20:	2f 5f       	subi	r18, 0xFF	; 255
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	a9 01       	movw	r20, r18
    2b26:	2a e0       	ldi	r18, 0x0A	; 10
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	0e 94 cd 19 	call	0x339a	; 0x339a <ltoa>
   LCD_displayString(buff); /* Display the string */
    2b2e:	ce 01       	movw	r24, r28
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <LCD_displayString>
}
    2b36:	64 96       	adiw	r28, 0x14	; 20
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_sendCommand>
}
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <LED_init>:
/*
 * Description :
 * Function to initialize the required led using gpio and initially turn it off .
 */
void LED_init(void)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
#ifdef RED_LED
	GPIO_setupPinDirection(RED_LED_PORT_ID, RED_LED_PIN_ID, PIN_OUTPUT);
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, TURN_OFF_LED);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	60 e0       	ldi	r22, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
#endif
#ifdef GREEN_LED
	GPIO_setupPinDirection(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, PIN_OUTPUT);
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	41 e0       	ldi	r20, 0x01	; 1
    2b7e:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, TURN_OFF_LED);
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
#endif
#ifdef BLUE_LED
	GPIO_setupPinDirection(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, PIN_OUTPUT);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	62 e0       	ldi	r22, 0x02	; 2
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>
	GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, TURN_OFF_LED);
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	62 e0       	ldi	r22, 0x02	; 2
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
#endif
}
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <LED_on>:
/*
 * Description :
 * Function to turn on the required led using gpio .
 */
void LED_on(uint8 a_led_id)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	0f 92       	push	r0
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	/*this mean that is is the Red Led*/
	if(0==a_led_id)
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	88 23       	and	r24, r24
    2bb6:	31 f4       	brne	.+12     	; 0x2bc4 <LED_on+0x1e>
	{
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, TURN_ON_LED);
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2bc2:	11 c0       	rjmp	.+34     	; 0x2be6 <LED_on+0x40>
	}
	/*this mean that is is the green Led*/
	else if (1==a_led_id)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	31 f4       	brne	.+12     	; 0x2bd6 <LED_on+0x30>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, TURN_ON_LED);
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	61 e0       	ldi	r22, 0x01	; 1
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2bd4:	08 c0       	rjmp	.+16     	; 0x2be6 <LED_on+0x40>
	}
	/*this mean that is is the blue Led*/
	else if (2==a_led_id)
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	29 f4       	brne	.+10     	; 0x2be6 <LED_on+0x40>
	{
		GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, TURN_ON_LED);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	else
	{
		/*handling more LED_id if u need to connect more leds*/
	}

}
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <LED_off>:
/*
 * Description :
 * Function to turn off the required led using gpio .
 */
void LED_off(uint8 a_led_id)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	0f 92       	push	r0
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	/*this mean that is is the Red Led*/
	if(0==a_led_id)
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	88 23       	and	r24, r24
    2bfe:	31 f4       	brne	.+12     	; 0x2c0c <LED_off+0x1e>
	{
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, TURN_OFF_LED);
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2c0a:	11 c0       	rjmp	.+34     	; 0x2c2e <LED_off+0x40>
	}
	/*this mean that is is the green Led*/
	else if (1==a_led_id)
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	31 f4       	brne	.+12     	; 0x2c1e <LED_off+0x30>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, TURN_OFF_LED);
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    2c1c:	08 c0       	rjmp	.+16     	; 0x2c2e <LED_off+0x40>
	}
	/*this mean that is is the blue Led*/
	else if (2==a_led_id)
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	82 30       	cpi	r24, 0x02	; 2
    2c22:	29 f4       	brne	.+10     	; 0x2c2e <LED_off+0x40>
	{
		GPIO_writePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID, TURN_OFF_LED);
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	62 e0       	ldi	r22, 0x02	; 2
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
	else
	{
		/*handling more LED_id if u need to connect more leds*/
	}

}
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LED_toggle>:
/*
 * Description :
 * Function to toggle the required led using gpio .
 */
void LED_toggle(uint8 a_led_id)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	89 83       	std	Y+1, r24	; 0x01
	/*this mean that is is the Red Led*/
	if(0==a_led_id)
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	88 23       	and	r24, r24
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <LED_toggle+0x1c>
	{
		GPIO_togglePin(RED_LED_PORT_ID, RED_LED_PIN_ID);
    2c48:	82 e0       	ldi	r24, 0x02	; 2
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_togglePin>
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <LED_toggle+0x3a>
	}
	/*this mean that is is the green Led*/
	else if (1==a_led_id)
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	81 30       	cpi	r24, 0x01	; 1
    2c56:	29 f4       	brne	.+10     	; 0x2c62 <LED_toggle+0x2c>
	{
		GPIO_togglePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_togglePin>
    2c60:	07 c0       	rjmp	.+14     	; 0x2c70 <LED_toggle+0x3a>
	}
	/*this mean that is is the blue Led*/
	else if (2==a_led_id)
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	82 30       	cpi	r24, 0x02	; 2
    2c66:	21 f4       	brne	.+8      	; 0x2c70 <LED_toggle+0x3a>
	{
		GPIO_togglePin(BLUE_LED_PORT_ID, BLUE_LED_PIN_ID);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	62 e0       	ldi	r22, 0x02	; 2
    2c6c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_togglePin>
	}
	else
	{
		/*handling more LED_id if u need to connect more leds*/
	}
}
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <main>:
#include "led.h"
#include "ultrasonic.h"
#include"Internal_mapping_register_private.h"/*for Global interrupt enable*/
#include <util/delay.h>
int main(void)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	ac 97       	sbiw	r28, 0x2c	; 44
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
	uint16 distance = 0;
    2c8c:	1c a6       	std	Y+44, r1	; 0x2c
    2c8e:	1b a6       	std	Y+43, r1	; 0x2b

	/*Enable Global Interrupt*/
	SREG_REG.Bits.I_Bit=1;
    2c90:	ef e5       	ldi	r30, 0x5F	; 95
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	80 68       	ori	r24, 0x80	; 128
    2c98:	80 83       	st	Z, r24

	/*Initialization of LCD*/
	LCD_init();
    2c9a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <LCD_init>

	/*Initialization of the Buzzer*/
	BUZZER_init();
    2c9e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BUZZER_init>

	/*Initialization of the Ultrasonic sensor*/
	Ultrasonic_init();
    2ca2:	0e 94 1e 19 	call	0x323c	; 0x323c <Ultrasonic_init>

	/*Initialization of the define LEDS*/
	LED_init();
    2ca6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <LED_init>

	LCD_displayString("Distance= ");
    2caa:	80 e6       	ldi	r24, 0x60	; 96
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <LCD_displayString>

	while(1)
	{
		/* Read the distance from the Ultrasonic sensor */
		distance = Ultrasonic_readDistance();
    2cb2:	0e 94 39 19 	call	0x3272	; 0x3272 <Ultrasonic_readDistance>
    2cb6:	9c a7       	std	Y+44, r25	; 0x2c
    2cb8:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_moveCursor(0, 10);
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	6a e0       	ldi	r22, 0x0A	; 10
    2cbe:	0e 94 fd 14 	call	0x29fa	; 0x29fa <LCD_moveCursor>
		LCD_intgerToString(distance);
    2cc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc6:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <LCD_intgerToString>
		LCD_displayString(" cm   ");
    2cca:	8b e6       	ldi	r24, 0x6B	; 107
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <LCD_displayString>

		if(distance <= 5)
    2cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd6:	86 30       	cpi	r24, 0x06	; 6
    2cd8:	91 05       	cpc	r25, r1
    2cda:	08 f0       	brcs	.+2      	; 0x2cde <main+0x66>
    2cdc:	fb c0       	rjmp	.+502    	; 0x2ed4 <main+0x25c>
		{
			BUZZER_on();
    2cde:	0e 94 60 06 	call	0xcc0	; 0xcc0 <BUZZER_on>
			LED_on(RED_LED);
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_on(GREEN_LED);
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_on(BLUE_LED);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	aa e7       	ldi	r26, 0x7A	; 122
    2cfa:	b3 e4       	ldi	r27, 0x43	; 67
    2cfc:	8f a3       	std	Y+39, r24	; 0x27
    2cfe:	98 a7       	std	Y+40, r25	; 0x28
    2d00:	a9 a7       	std	Y+41, r26	; 0x29
    2d02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	6f a1       	ldd	r22, Y+39	; 0x27
    2d06:	78 a5       	ldd	r23, Y+40	; 0x28
    2d08:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a e7       	ldi	r20, 0x7A	; 122
    2d12:	55 e4       	ldi	r21, 0x45	; 69
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	8b a3       	std	Y+35, r24	; 0x23
    2d1e:	9c a3       	std	Y+36, r25	; 0x24
    2d20:	ad a3       	std	Y+37, r26	; 0x25
    2d22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d24:	6b a1       	ldd	r22, Y+35	; 0x23
    2d26:	7c a1       	ldd	r23, Y+36	; 0x24
    2d28:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <main+0xce>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <main+0x14c>
	else if (__tmp > 65535)
    2d46:	6b a1       	ldd	r22, Y+35	; 0x23
    2d48:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d60:	78 a5       	ldd	r23, Y+40	; 0x28
    2d62:	89 a5       	ldd	r24, Y+41	; 0x29
    2d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <main+0x12e>
    2d88:	80 e9       	ldi	r24, 0x90	; 144
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	98 a3       	std	Y+32, r25	; 0x20
    2d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d92:	98 a1       	ldd	r25, Y+32	; 0x20
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <main+0x11c>
    2d98:	98 a3       	std	Y+32, r25	; 0x20
    2d9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9a a3       	std	Y+34, r25	; 0x22
    2da4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	89 a1       	ldd	r24, Y+33	; 0x21
    2da8:	9a a1       	ldd	r25, Y+34	; 0x22
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <main+0x110>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
    2dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dca:	8d 8f       	std	Y+29, r24	; 0x1d
    2dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <main+0x158>
    2dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			BUZZER_off();
    2dd8:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
			LED_off(RED_LED);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
			LED_off(GREEN_LED);
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
			LED_off(BLUE_LED);
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	aa e7       	ldi	r26, 0x7A	; 122
    2df4:	b3 e4       	ldi	r27, 0x43	; 67
    2df6:	89 8f       	std	Y+25, r24	; 0x19
    2df8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dfa:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	55 e4       	ldi	r21, 0x45	; 69
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8d 8b       	std	Y+21, r24	; 0x15
    2e18:	9e 8b       	std	Y+22, r25	; 0x16
    2e1a:	af 8b       	std	Y+23, r26	; 0x17
    2e1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e20:	7e 89       	ldd	r23, Y+22	; 0x16
    2e22:	8f 89       	ldd	r24, Y+23	; 0x17
    2e24:	98 8d       	ldd	r25, Y+24	; 0x18
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <main+0x1c8>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 8b       	std	Y+20, r25	; 0x14
    2e3c:	8b 8b       	std	Y+19, r24	; 0x13
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <main+0x246>
	else if (__tmp > 65535)
    2e40:	6d 89       	ldd	r22, Y+21	; 0x15
    2e42:	7e 89       	ldd	r23, Y+22	; 0x16
    2e44:	8f 89       	ldd	r24, Y+23	; 0x17
    2e46:	98 8d       	ldd	r25, Y+24	; 0x18
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <main+0x228>
    2e82:	80 e9       	ldi	r24, 0x90	; 144
    2e84:	91 e0       	ldi	r25, 0x01	; 1
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	89 8b       	std	Y+17, r24	; 0x11
    2e8a:	89 89       	ldd	r24, Y+17	; 0x11
    2e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x216>
    2e92:	9a 8b       	std	Y+18, r25	; 0x12
    2e94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8b 89       	ldd	r24, Y+19	; 0x13
    2e98:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <main+0x20a>
    2ea8:	58 c0       	rjmp	.+176    	; 0x2f5a <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	98 8b       	std	Y+16, r25	; 0x10
    2ec4:	8f 87       	std	Y+15, r24	; 0x0f
    2ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec8:	98 89       	ldd	r25, Y+16	; 0x10
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <main+0x252>
    2ece:	98 8b       	std	Y+16, r25	; 0x10
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f
    2ed2:	43 c0       	rjmp	.+134    	; 0x2f5a <main+0x2e2>
			_delay_ms(250);
		}
		else if(distance<=10)
    2ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed8:	8b 30       	cpi	r24, 0x0B	; 11
    2eda:	91 05       	cpc	r25, r1
    2edc:	60 f4       	brcc	.+24     	; 0x2ef6 <main+0x27e>
		{
			BUZZER_off();
    2ede:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
			LED_on(RED_LED);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_on(GREEN_LED);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_on(BLUE_LED);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
    2ef4:	32 c0       	rjmp	.+100    	; 0x2f5a <main+0x2e2>
			}
		else if(distance<=15)
    2ef6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ef8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efa:	80 31       	cpi	r24, 0x10	; 16
    2efc:	91 05       	cpc	r25, r1
    2efe:	60 f4       	brcc	.+24     	; 0x2f18 <main+0x2a0>
		{
			BUZZER_off();
    2f00:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
			LED_on(RED_LED);
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_on(GREEN_LED);
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_off(BLUE_LED);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
    2f16:	21 c0       	rjmp	.+66     	; 0x2f5a <main+0x2e2>
		}
		else if(distance<=20)
    2f18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1c:	85 31       	cpi	r24, 0x15	; 21
    2f1e:	91 05       	cpc	r25, r1
    2f20:	60 f4       	brcc	.+24     	; 0x2f3a <main+0x2c2>
		{
			BUZZER_off();
    2f22:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
			LED_on(RED_LED);
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <LED_on>
			LED_off(GREEN_LED);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
			LED_off(BLUE_LED);
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
    2f38:	10 c0       	rjmp	.+32     	; 0x2f5a <main+0x2e2>
		}
		else if(distance<=25)
    2f3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f3e:	8a 31       	cpi	r24, 0x1A	; 26
    2f40:	91 05       	cpc	r25, r1
    2f42:	58 f4       	brcc	.+22     	; 0x2f5a <main+0x2e2>
		{
			BUZZER_off();
    2f44:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
			LED_off(RED_LED);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
			LED_off(GREEN_LED);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
			LED_off(BLUE_LED);
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LED_off>
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	aa e7       	ldi	r26, 0x7A	; 122
    2f60:	b3 e4       	ldi	r27, 0x43	; 67
    2f62:	8b 87       	std	Y+11, r24	; 0x0b
    2f64:	9c 87       	std	Y+12, r25	; 0x0c
    2f66:	ad 87       	std	Y+13, r26	; 0x0d
    2f68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	4a e7       	ldi	r20, 0x7A	; 122
    2f78:	55 e4       	ldi	r21, 0x45	; 69
    2f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	8f 83       	std	Y+7, r24	; 0x07
    2f84:	98 87       	std	Y+8, r25	; 0x08
    2f86:	a9 87       	std	Y+9, r26	; 0x09
    2f88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8c:	78 85       	ldd	r23, Y+8	; 0x08
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e8       	ldi	r20, 0x80	; 128
    2f98:	5f e3       	ldi	r21, 0x3F	; 63
    2f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f9e:	88 23       	and	r24, r24
    2fa0:	2c f4       	brge	.+10     	; 0x2fac <main+0x334>
		__ticks = 1;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	3f c0       	rjmp	.+126    	; 0x302a <main+0x3b2>
	else if (__tmp > 65535)
    2fac:	6f 81       	ldd	r22, Y+7	; 0x07
    2fae:	78 85       	ldd	r23, Y+8	; 0x08
    2fb0:	89 85       	ldd	r24, Y+9	; 0x09
    2fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	3f ef       	ldi	r19, 0xFF	; 255
    2fb8:	4f e7       	ldi	r20, 0x7F	; 127
    2fba:	57 e4       	ldi	r21, 0x47	; 71
    2fbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	4c f5       	brge	.+82     	; 0x3016 <main+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e2       	ldi	r20, 0x20	; 32
    2fd2:	51 e4       	ldi	r21, 0x41	; 65
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	bc 01       	movw	r22, r24
    2fde:	cd 01       	movw	r24, r26
    2fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	0f c0       	rjmp	.+30     	; 0x300c <main+0x394>
    2fee:	80 e9       	ldi	r24, 0x90	; 144
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	8b 83       	std	Y+3, r24	; 0x03
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0x382>
    2ffe:	9c 83       	std	Y+4, r25	; 0x04
    3000:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	9e 83       	std	Y+6, r25	; 0x06
    300a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300c:	8d 81       	ldd	r24, Y+5	; 0x05
    300e:	9e 81       	ldd	r25, Y+6	; 0x06
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	69 f7       	brne	.-38     	; 0x2fee <main+0x376>
    3014:	4e ce       	rjmp	.-868    	; 0x2cb2 <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3016:	6f 81       	ldd	r22, Y+7	; 0x07
    3018:	78 85       	ldd	r23, Y+8	; 0x08
    301a:	89 85       	ldd	r24, Y+9	; 0x09
    301c:	9a 85       	ldd	r25, Y+10	; 0x0a
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e 83       	std	Y+6, r25	; 0x06
    3028:	8d 83       	std	Y+5, r24	; 0x05
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	9e 81       	ldd	r25, Y+6	; 0x06
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <main+0x3be>
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	39 ce       	rjmp	.-910    	; 0x2cb2 <main+0x3a>

00003040 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    3048:	80 91 7c 00 	lds	r24, 0x007C
    304c:	8f 5f       	subi	r24, 0xFF	; 255
    304e:	80 93 7c 00 	sts	0x007C, r24
	if(g_edgeCount == 1)
    3052:	80 91 7c 00 	lds	r24, 0x007C
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	31 f4       	brne	.+12     	; 0x3066 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    305a:	0e 94 03 0b 	call	0x1606	; 0x1606 <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <ICU_setEdgeDetectionType>
    3064:	0d c0       	rjmp	.+26     	; 0x3080 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    3066:	80 91 7c 00 	lds	r24, 0x007C
    306a:	82 30       	cpi	r24, 0x02	; 2
    306c:	49 f4       	brne	.+18     	; 0x3080 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    306e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ICU_getInputCaptureValue>
    3072:	90 93 7e 00 	sts	0x007E, r25
    3076:	80 93 7d 00 	sts	0x007D, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RISING);
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <ICU_setEdgeDetectionType>
	}
}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	68 97       	sbiw	r28, 0x18	; 24
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_HIGH);
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	65 e0       	ldi	r22, 0x05	; 5
    309e:	41 e0       	ldi	r20, 0x01	; 1
    30a0:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	a0 e2       	ldi	r26, 0x20	; 32
    30aa:	b1 e4       	ldi	r27, 0x41	; 65
    30ac:	8d 8b       	std	Y+21, r24	; 0x15
    30ae:	9e 8b       	std	Y+22, r25	; 0x16
    30b0:	af 8b       	std	Y+23, r26	; 0x17
    30b2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30b4:	6d 89       	ldd	r22, Y+21	; 0x15
    30b6:	7e 89       	ldd	r23, Y+22	; 0x16
    30b8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ba:	98 8d       	ldd	r25, Y+24	; 0x18
    30bc:	2b ea       	ldi	r18, 0xAB	; 171
    30be:	3a ea       	ldi	r19, 0xAA	; 170
    30c0:	4a ea       	ldi	r20, 0xAA	; 170
    30c2:	50 e4       	ldi	r21, 0x40	; 64
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	89 8b       	std	Y+17, r24	; 0x11
    30ce:	9a 8b       	std	Y+18, r25	; 0x12
    30d0:	ab 8b       	std	Y+19, r26	; 0x13
    30d2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30d4:	69 89       	ldd	r22, Y+17	; 0x11
    30d6:	7a 89       	ldd	r23, Y+18	; 0x12
    30d8:	8b 89       	ldd	r24, Y+19	; 0x13
    30da:	9c 89       	ldd	r25, Y+20	; 0x14
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e8       	ldi	r20, 0x80	; 128
    30e2:	5f e3       	ldi	r21, 0x3F	; 63
    30e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e8:	88 23       	and	r24, r24
    30ea:	1c f4       	brge	.+6      	; 0x30f2 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	88 8b       	std	Y+16, r24	; 0x10
    30f0:	91 c0       	rjmp	.+290    	; 0x3214 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    30f2:	69 89       	ldd	r22, Y+17	; 0x11
    30f4:	7a 89       	ldd	r23, Y+18	; 0x12
    30f6:	8b 89       	ldd	r24, Y+19	; 0x13
    30f8:	9c 89       	ldd	r25, Y+20	; 0x14
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	53 e4       	ldi	r21, 0x43	; 67
    3102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	0c f0       	brlt	.+2      	; 0x310c <Ultrasonic_Trigger+0x86>
    310a:	7b c0       	rjmp	.+246    	; 0x3202 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    310c:	6d 89       	ldd	r22, Y+21	; 0x15
    310e:	7e 89       	ldd	r23, Y+22	; 0x16
    3110:	8f 89       	ldd	r24, Y+23	; 0x17
    3112:	98 8d       	ldd	r25, Y+24	; 0x18
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4a e7       	ldi	r20, 0x7A	; 122
    311a:	54 e4       	ldi	r21, 0x44	; 68
    311c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8c 87       	std	Y+12, r24	; 0x0c
    3126:	9d 87       	std	Y+13, r25	; 0x0d
    3128:	ae 87       	std	Y+14, r26	; 0x0e
    312a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6c 85       	ldd	r22, Y+12	; 0x0c
    312e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3130:	8e 85       	ldd	r24, Y+14	; 0x0e
    3132:	9f 85       	ldd	r25, Y+15	; 0x0f
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a e7       	ldi	r20, 0x7A	; 122
    313a:	55 e4       	ldi	r21, 0x45	; 69
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	88 87       	std	Y+8, r24	; 0x08
    3146:	99 87       	std	Y+9, r25	; 0x09
    3148:	aa 87       	std	Y+10, r26	; 0x0a
    314a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    314c:	68 85       	ldd	r22, Y+8	; 0x08
    314e:	79 85       	ldd	r23, Y+9	; 0x09
    3150:	8a 85       	ldd	r24, Y+10	; 0x0a
    3152:	9b 85       	ldd	r25, Y+11	; 0x0b
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9f 83       	std	Y+7, r25	; 0x07
    316a:	8e 83       	std	Y+6, r24	; 0x06
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    316e:	68 85       	ldd	r22, Y+8	; 0x08
    3170:	79 85       	ldd	r23, Y+9	; 0x09
    3172:	8a 85       	ldd	r24, Y+10	; 0x0a
    3174:	9b 85       	ldd	r25, Y+11	; 0x0b
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6c 85       	ldd	r22, Y+12	; 0x0c
    3188:	7d 85       	ldd	r23, Y+13	; 0x0d
    318a:	8e 85       	ldd	r24, Y+14	; 0x0e
    318c:	9f 85       	ldd	r25, Y+15	; 0x0f
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9f 83       	std	Y+7, r25	; 0x07
    31ac:	8e 83       	std	Y+6, r24	; 0x06
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <Ultrasonic_Trigger+0x148>
    31b0:	80 e9       	ldi	r24, 0x90	; 144
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	9d 83       	std	Y+5, r25	; 0x05
    31b6:	8c 83       	std	Y+4, r24	; 0x04
    31b8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ba:	9d 81       	ldd	r25, Y+5	; 0x05
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <Ultrasonic_Trigger+0x136>
    31c0:	9d 83       	std	Y+5, r25	; 0x05
    31c2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	8e 81       	ldd	r24, Y+6	; 0x06
    31c6:	9f 81       	ldd	r25, Y+7	; 0x07
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	9f 83       	std	Y+7, r25	; 0x07
    31cc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	8e 81       	ldd	r24, Y+6	; 0x06
    31d0:	9f 81       	ldd	r25, Y+7	; 0x07
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <Ultrasonic_Trigger+0x12a>
    31d6:	24 c0       	rjmp	.+72     	; 0x3220 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	68 85       	ldd	r22, Y+8	; 0x08
    31da:	79 85       	ldd	r23, Y+9	; 0x09
    31dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31de:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9f 83       	std	Y+7, r25	; 0x07
    31ea:	8e 83       	std	Y+6, r24	; 0x06
    31ec:	8e 81       	ldd	r24, Y+6	; 0x06
    31ee:	9f 81       	ldd	r25, Y+7	; 0x07
    31f0:	9b 83       	std	Y+3, r25	; 0x03
    31f2:	8a 83       	std	Y+2, r24	; 0x02
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <Ultrasonic_Trigger+0x172>
    31fc:	9b 83       	std	Y+3, r25	; 0x03
    31fe:	8a 83       	std	Y+2, r24	; 0x02
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3202:	69 89       	ldd	r22, Y+17	; 0x11
    3204:	7a 89       	ldd	r23, Y+18	; 0x12
    3206:	8b 89       	ldd	r24, Y+19	; 0x13
    3208:	9c 89       	ldd	r25, Y+20	; 0x14
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	88 8b       	std	Y+16, r24	; 0x10
    3214:	88 89       	ldd	r24, Y+16	; 0x10
    3216:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	8a 95       	dec	r24
    321c:	f1 f7       	brne	.-4      	; 0x321a <Ultrasonic_Trigger+0x194>
    321e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_LOW);
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	65 e0       	ldi	r22, 0x05	; 5
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	0e 94 6e 07 	call	0xedc	; 0xedc <GPIO_writePin>
}
    322a:	68 96       	adiw	r28, 0x18	; 24
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	00 d0       	rcall	.+0      	; 0x3242 <Ultrasonic_init+0x6>
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	ICU_ConfigType Icu_Config = {F_CPU_8,RISING};
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	89 83       	std	Y+1, r24	; 0x01
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the Trigger pin as output */
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,PIN_OUTPUT);
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	65 e0       	ldi	r22, 0x05	; 5
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 83 06 	call	0xd06	; 0xd06 <GPIO_setupPinDirection>

	/* Initialize the ICU Driver */
	ICU_init(&Icu_Config);
    3258:	ce 01       	movw	r24, r28
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ICU_init>

	/* Set the Call back function pointer in the ICU driver */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    3260:	80 e2       	ldi	r24, 0x20	; 32
    3262:	98 e1       	ldi	r25, 0x18	; 24
    3264:	0e 94 c7 0a 	call	0x158e	; 0x158e <ICU_setCallBack>
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <Ultrasonic_readDistance>:
 * 3. Send the Trigger to the Ultrasonic by call Ultrasonic_Trigger function
 * 4. Wait for the measurements to be done by the ICU. We need two edges raising and falling.
 * 5. Calculate the distance in Centimeter value.
 */
uint16 Ultrasonic_readDistance(void)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance = 0;
    327a:	10 92 7f 00 	sts	0x007F, r1
	g_edgeCount = 0;
    327e:	10 92 7c 00 	sts	0x007C, r1
	g_timeHigh = 0;
    3282:	10 92 7e 00 	sts	0x007E, r1
    3286:	10 92 7d 00 	sts	0x007D, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	ICU_clearTimerValue();
    328a:	0e 94 03 0b 	call	0x1606	; 0x1606 <ICU_clearTimerValue>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    328e:	0e 94 43 18 	call	0x3086	; 0x3086 <Ultrasonic_Trigger>

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    3292:	80 91 7c 00 	lds	r24, 0x007C
    3296:	82 30       	cpi	r24, 0x02	; 2
    3298:	e1 f7       	brne	.-8      	; 0x3292 <Ultrasonic_readDistance+0x20>

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 117;
    329a:	80 91 7d 00 	lds	r24, 0x007D
    329e:	90 91 7e 00 	lds	r25, 0x007E
    32a2:	25 e7       	ldi	r18, 0x75	; 117
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	b9 01       	movw	r22, r18
    32a8:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodhi4>
    32ac:	cb 01       	movw	r24, r22
    32ae:	80 93 7f 00 	sts	0x007F, r24

	return g_distance+1;
    32b2:	80 91 7f 00 	lds	r24, 0x007F
    32b6:	88 2f       	mov	r24, r24
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	01 96       	adiw	r24, 0x01	; 1
}
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <__udivmodhi4>:
    32c2:	aa 1b       	sub	r26, r26
    32c4:	bb 1b       	sub	r27, r27
    32c6:	51 e1       	ldi	r21, 0x11	; 17
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <__udivmodhi4_ep>

000032ca <__udivmodhi4_loop>:
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	a6 17       	cp	r26, r22
    32d0:	b7 07       	cpc	r27, r23
    32d2:	10 f0       	brcs	.+4      	; 0x32d8 <__udivmodhi4_ep>
    32d4:	a6 1b       	sub	r26, r22
    32d6:	b7 0b       	sbc	r27, r23

000032d8 <__udivmodhi4_ep>:
    32d8:	88 1f       	adc	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	5a 95       	dec	r21
    32de:	a9 f7       	brne	.-22     	; 0x32ca <__udivmodhi4_loop>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	08 95       	ret

000032ea <__prologue_saves__>:
    32ea:	2f 92       	push	r2
    32ec:	3f 92       	push	r3
    32ee:	4f 92       	push	r4
    32f0:	5f 92       	push	r5
    32f2:	6f 92       	push	r6
    32f4:	7f 92       	push	r7
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	ca 1b       	sub	r28, r26
    3314:	db 0b       	sbc	r29, r27
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	09 94       	ijmp

00003322 <__epilogue_restores__>:
    3322:	2a 88       	ldd	r2, Y+18	; 0x12
    3324:	39 88       	ldd	r3, Y+17	; 0x11
    3326:	48 88       	ldd	r4, Y+16	; 0x10
    3328:	5f 84       	ldd	r5, Y+15	; 0x0f
    332a:	6e 84       	ldd	r6, Y+14	; 0x0e
    332c:	7d 84       	ldd	r7, Y+13	; 0x0d
    332e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3330:	9b 84       	ldd	r9, Y+11	; 0x0b
    3332:	aa 84       	ldd	r10, Y+10	; 0x0a
    3334:	b9 84       	ldd	r11, Y+9	; 0x09
    3336:	c8 84       	ldd	r12, Y+8	; 0x08
    3338:	df 80       	ldd	r13, Y+7	; 0x07
    333a:	ee 80       	ldd	r14, Y+6	; 0x06
    333c:	fd 80       	ldd	r15, Y+5	; 0x05
    333e:	0c 81       	ldd	r16, Y+4	; 0x04
    3340:	1b 81       	ldd	r17, Y+3	; 0x03
    3342:	aa 81       	ldd	r26, Y+2	; 0x02
    3344:	b9 81       	ldd	r27, Y+1	; 0x01
    3346:	ce 0f       	add	r28, r30
    3348:	d1 1d       	adc	r29, r1
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	ed 01       	movw	r28, r26
    3356:	08 95       	ret

00003358 <itoa>:
    3358:	fb 01       	movw	r30, r22
    335a:	9f 01       	movw	r18, r30
    335c:	e8 94       	clt
    335e:	42 30       	cpi	r20, 0x02	; 2
    3360:	c4 f0       	brlt	.+48     	; 0x3392 <itoa+0x3a>
    3362:	45 32       	cpi	r20, 0x25	; 37
    3364:	b4 f4       	brge	.+44     	; 0x3392 <itoa+0x3a>
    3366:	4a 30       	cpi	r20, 0x0A	; 10
    3368:	29 f4       	brne	.+10     	; 0x3374 <itoa+0x1c>
    336a:	97 fb       	bst	r25, 7
    336c:	1e f4       	brtc	.+6      	; 0x3374 <itoa+0x1c>
    336e:	90 95       	com	r25
    3370:	81 95       	neg	r24
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	64 2f       	mov	r22, r20
    3376:	77 27       	eor	r23, r23
    3378:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodhi4>
    337c:	80 5d       	subi	r24, 0xD0	; 208
    337e:	8a 33       	cpi	r24, 0x3A	; 58
    3380:	0c f0       	brlt	.+2      	; 0x3384 <itoa+0x2c>
    3382:	89 5d       	subi	r24, 0xD9	; 217
    3384:	81 93       	st	Z+, r24
    3386:	cb 01       	movw	r24, r22
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	a1 f7       	brne	.-24     	; 0x3374 <itoa+0x1c>
    338c:	16 f4       	brtc	.+4      	; 0x3392 <itoa+0x3a>
    338e:	5d e2       	ldi	r21, 0x2D	; 45
    3390:	51 93       	st	Z+, r21
    3392:	10 82       	st	Z, r1
    3394:	c9 01       	movw	r24, r18
    3396:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <strrev>

0000339a <ltoa>:
    339a:	fa 01       	movw	r30, r20
    339c:	cf 93       	push	r28
    339e:	ff 93       	push	r31
    33a0:	ef 93       	push	r30
    33a2:	22 30       	cpi	r18, 0x02	; 2
    33a4:	44 f1       	brlt	.+80     	; 0x33f6 <ltoa+0x5c>
    33a6:	25 32       	cpi	r18, 0x25	; 37
    33a8:	34 f5       	brge	.+76     	; 0x33f6 <ltoa+0x5c>
    33aa:	c2 2f       	mov	r28, r18
    33ac:	e8 94       	clt
    33ae:	ca 30       	cpi	r28, 0x0A	; 10
    33b0:	49 f4       	brne	.+18     	; 0x33c4 <ltoa+0x2a>
    33b2:	97 fb       	bst	r25, 7
    33b4:	3e f4       	brtc	.+14     	; 0x33c4 <ltoa+0x2a>
    33b6:	90 95       	com	r25
    33b8:	80 95       	com	r24
    33ba:	70 95       	com	r23
    33bc:	61 95       	neg	r22
    33be:	7f 4f       	sbci	r23, 0xFF	; 255
    33c0:	8f 4f       	sbci	r24, 0xFF	; 255
    33c2:	9f 4f       	sbci	r25, 0xFF	; 255
    33c4:	2c 2f       	mov	r18, r28
    33c6:	33 27       	eor	r19, r19
    33c8:	44 27       	eor	r20, r20
    33ca:	55 27       	eor	r21, r21
    33cc:	ff 93       	push	r31
    33ce:	ef 93       	push	r30
    33d0:	0e 94 11 1a 	call	0x3422	; 0x3422 <__udivmodsi4>
    33d4:	ef 91       	pop	r30
    33d6:	ff 91       	pop	r31
    33d8:	60 5d       	subi	r22, 0xD0	; 208
    33da:	6a 33       	cpi	r22, 0x3A	; 58
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <ltoa+0x46>
    33de:	69 5d       	subi	r22, 0xD9	; 217
    33e0:	61 93       	st	Z+, r22
    33e2:	b9 01       	movw	r22, r18
    33e4:	ca 01       	movw	r24, r20
    33e6:	60 50       	subi	r22, 0x00	; 0
    33e8:	70 40       	sbci	r23, 0x00	; 0
    33ea:	80 40       	sbci	r24, 0x00	; 0
    33ec:	90 40       	sbci	r25, 0x00	; 0
    33ee:	51 f7       	brne	.-44     	; 0x33c4 <ltoa+0x2a>
    33f0:	16 f4       	brtc	.+4      	; 0x33f6 <ltoa+0x5c>
    33f2:	cd e2       	ldi	r28, 0x2D	; 45
    33f4:	c1 93       	st	Z+, r28
    33f6:	10 82       	st	Z, r1
    33f8:	8f 91       	pop	r24
    33fa:	9f 91       	pop	r25
    33fc:	cf 91       	pop	r28
    33fe:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <strrev>

00003402 <strrev>:
    3402:	dc 01       	movw	r26, r24
    3404:	fc 01       	movw	r30, r24
    3406:	67 2f       	mov	r22, r23
    3408:	71 91       	ld	r23, Z+
    340a:	77 23       	and	r23, r23
    340c:	e1 f7       	brne	.-8      	; 0x3406 <strrev+0x4>
    340e:	32 97       	sbiw	r30, 0x02	; 2
    3410:	04 c0       	rjmp	.+8      	; 0x341a <strrev+0x18>
    3412:	7c 91       	ld	r23, X
    3414:	6d 93       	st	X+, r22
    3416:	70 83       	st	Z, r23
    3418:	62 91       	ld	r22, -Z
    341a:	ae 17       	cp	r26, r30
    341c:	bf 07       	cpc	r27, r31
    341e:	c8 f3       	brcs	.-14     	; 0x3412 <strrev+0x10>
    3420:	08 95       	ret

00003422 <__udivmodsi4>:
    3422:	a1 e2       	ldi	r26, 0x21	; 33
    3424:	1a 2e       	mov	r1, r26
    3426:	aa 1b       	sub	r26, r26
    3428:	bb 1b       	sub	r27, r27
    342a:	fd 01       	movw	r30, r26
    342c:	0d c0       	rjmp	.+26     	; 0x3448 <__udivmodsi4_ep>

0000342e <__udivmodsi4_loop>:
    342e:	aa 1f       	adc	r26, r26
    3430:	bb 1f       	adc	r27, r27
    3432:	ee 1f       	adc	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	a2 17       	cp	r26, r18
    3438:	b3 07       	cpc	r27, r19
    343a:	e4 07       	cpc	r30, r20
    343c:	f5 07       	cpc	r31, r21
    343e:	20 f0       	brcs	.+8      	; 0x3448 <__udivmodsi4_ep>
    3440:	a2 1b       	sub	r26, r18
    3442:	b3 0b       	sbc	r27, r19
    3444:	e4 0b       	sbc	r30, r20
    3446:	f5 0b       	sbc	r31, r21

00003448 <__udivmodsi4_ep>:
    3448:	66 1f       	adc	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	88 1f       	adc	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	1a 94       	dec	r1
    3452:	69 f7       	brne	.-38     	; 0x342e <__udivmodsi4_loop>
    3454:	60 95       	com	r22
    3456:	70 95       	com	r23
    3458:	80 95       	com	r24
    345a:	90 95       	com	r25
    345c:	9b 01       	movw	r18, r22
    345e:	ac 01       	movw	r20, r24
    3460:	bd 01       	movw	r22, r26
    3462:	cf 01       	movw	r24, r30
    3464:	08 95       	ret

00003466 <_exit>:
    3466:	f8 94       	cli

00003468 <__stop_program>:
    3468:	ff cf       	rjmp	.-2      	; 0x3468 <__stop_program>
